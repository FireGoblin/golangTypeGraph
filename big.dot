digraph gographviz {
	Attrs->GraphTYPE[ label=field, style=dashed ];
	Nodes->GraphTYPE[ label=field, style=dashed ];
	Edges->GraphTYPE[ label=field, style=dashed ];
	SubGraphs->GraphTYPE[ label=field, style=dashed ];
	Relations->GraphTYPE[ label=field, style=dashed ];
	NodeTYPE->Nodes[ label=field, style=dashed ];
	Attrs->NodeTYPE[ label=field, style=dashed ];
	Attrs->SubGraphTYPE[ label=field, style=dashed ];
	SubGraphTYPE->SubGraphs[ label=field, style=dashed ];
	GraphTYPE->writer[ label=inherited, style=solid ];
	Attrs->EdgeTYPE[ label=field, style=dashed ];
	EdgeTYPE->Edges[ label=field, style=dashed ];
	GraphTYPE->Escape[ label=inherited, style=solid ];
	Interface->graphVisitor[ label=field, style=dashed ];
	Interface->stmtVisitor[ label=field, style=dashed ];
	Attrs->stmtVisitor[ label=field, style=dashed ];
	token_SEL_Type->token_SEL_Token[ label=field, style=dashed ];
	token_SEL_Type->token_SEL_TokenMap[ label=field, style=dashed ];
	token_SEL_Position->scanner_SEL_Error[ label=field, style=dashed ];
	token_SEL_Position->scanner_SEL_Scanner[ label=field, style=dashed ];
	parser_SEL_ActionRow->parser_SEL_ActionRow[ label=parent, style=solid ];
	parser_SEL_GotoRow->parser_SEL_GotoRow[ label=parent, style=solid ];
	parser_SEL_NT->parser_SEL_ProdTabEntry[ label=field, style=dashed ];
	parser_SEL_Shift->parser_SEL_Shift[ label=parent, style=solid ];
	parser_SEL_ActionTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_GotoTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_ProdTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_stack->parser_SEL_Parser[ label=field, style=dashed ];
	token_SEL_Position->parser_SEL_Parser[ label=field, style=dashed ];
	ast_SEL_NodeAttrs->ast_SEL_NodeAttrs[ label=parent, style=solid ];
	ast_SEL_EdgeOp->ast_SEL_EdgeRH[ label=field, style=dashed ];
	ast_SEL_Location->ast_SEL_EdgeRH[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_Port[ label=field, style=dashed ];
	ast_SEL_GraphType->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_StmtList->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_SubGraphTYPE[ label=field, style=dashed ];
	ast_SEL_StmtList->ast_SEL_SubGraphTYPE[ label=field, style=dashed ];
	ast_SEL_GraphAttrs->ast_SEL_GraphAttrs[ label=parent, style=solid ];
	ast_SEL_Id->ast_SEL_NodeId[ label=field, style=dashed ];
	ast_SEL_Port->ast_SEL_NodeId[ label=field, style=dashed ];
	ast_SEL_EdgeAttrs->ast_SEL_EdgeAttrs[ label=parent, style=solid ];
	ast_SEL_Id->ast_SEL_Attr[ label=field, style=dashed ];
	ast_SEL_Location->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_EdgeRHS->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_NodeId->ast_SEL_NodeStmt[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_NodeStmt[ label=field, style=dashed ];
	Escape->Interface[ label=implements, style=bold ];
	NodeInterface->GraphableNode[ label=inherited, style=solid ];
	EdgesInterface->GraphableNode[ label=inherited, style=solid ];
	parser_SEL_Accept->parser_SEL_Action[ label=implements, style=bold ];
	parser_SEL_Shift->parser_SEL_Action[ label=implements, style=bold ];
	parser_SEL_Reduce->parser_SEL_Action[ label=implements, style=bold ];
	parser_SEL_ActionRow->parser_SEL_Attrib[ label=implements, style=bold ];
	parser_SEL_Accept->parser_SEL_Attrib[ label=implements, style=bold ];
	parser_SEL_stack->parser_SEL_Attrib[ label=implements, style=bold ];
	parser_SEL_Shift->parser_SEL_Attrib[ label=implements, style=bold ];
	parser_SEL_Reduce->parser_SEL_Attrib[ label=implements, style=bold ];
	ast_SEL_Elem->ast_SEL_Location[ label=inherited, style=solid ];
	ast_SEL_Walkable->ast_SEL_Location[ label=inherited, style=solid ];
	ast_SEL_SubGraphTYPE->ast_SEL_Location[ label=implements, style=bold ];
	ast_SEL_NodeId->ast_SEL_Location[ label=implements, style=bold ];
	ast_SEL_NodeAttrs->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_EdgeRH->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_Port->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_EdgeOp->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_Bool->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_GraphTYPE->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_SubGraphTYPE->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_GraphAttrs->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_AList->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_EdgeRHS->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_NodeId->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_EdgeAttrs->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_Attr->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_StmtList->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_AttrList->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_EdgeStmt->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_Id->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_GraphType->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_NodeStmt->ast_SEL_Walkable[ label=implements, style=bold ];
	ast_SEL_NodeAttrs->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_EdgeRH->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_Port->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_EdgeOp->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_Bool->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_GraphTYPE->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_SubGraphTYPE->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_GraphAttrs->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_AList->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_EdgeRHS->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_NodeId->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_EdgeAttrs->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_Attr->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_StmtList->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_AttrList->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_EdgeStmt->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_Id->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_GraphType->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_NodeStmt->ast_SEL_Elem[ label=implements, style=bold ];
	ast_SEL_Elem->ast_SEL_Stmt[ label=inherited, style=solid ];
	ast_SEL_Walkable->ast_SEL_Stmt[ label=inherited, style=solid ];
	ast_SEL_NodeAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_SubGraphTYPE->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_GraphAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_EdgeAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_Attr->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_EdgeStmt->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_NodeStmt->ast_SEL_Stmt[ label=implements, style=bold ];
	Attrs [ label="{Attrs||Add(string, string) \lExtend(Attrs) \lAmmend(Attrs) \lSortedNames() []string\lCopy() Attrs\l}", shape=record ];
	EdgeTYPE [ label="{Edge|Src string\lSrcPort string\lDst string\lDstPort string\lDir bool\lAttrs Attrs\l|}", shape=record ];
	Edges [ label="{Edges|SrcToDsts map[string]map[string]*Edge\lDstToSrcs map[string]map[string]*Edge\lEdges []*Edge\l|Add(*Edge) \lSorted() []*Edge\l}", shape=record ];
	EdgesInterface [ label="{EdgesInterface||Edges() []*Edge\l}", shape=Mrecord ];
	Escape [ label="{Escape|Graph\l|SetName(string) \lAddPortEdge(string, bool, map[string]string) \lAddEdge(string, bool, map[string]string) \lAddNode(string, string, map[string]string) \lAddAttr(string, string) \lAddSubGraph(string, string, map[string]string) \lIsNode(string) bool\lIsSubGraph(string) bool\l}", shape=record ];
	GraphTYPE [ label="{Graph|Attrs Attrs\lName string\lDirected bool\lStrict bool\lNodes *Nodes\lEdges *Edges\lSubGraphs *SubGraphs\lRelations *Relations\l|SetStrict(bool) \lSetDir(bool) \lSetName(string) \lAddPortEdge(string, bool, map[string]string) \lAddEdge(string, bool, map[string]string) \lAddEdgesInterface(EdgesInterface) \lAddNode(string, string, map[string]string) \lAddNodeInterface(string, NodeInterface) \lAddGraphableNode(string, GraphableNode) \lAddGraphableNodes(string, []GraphableNode) \lgetAttrs(string) Attrs\lAddAttr(string, string, string) \lAddSubGraph(string, string, map[string]string) \lIsNode(string) bool\lIsSubGraph(string) bool\lWriteAst() *ast.Graph\lString() string\l}", shape=record ];
	GraphableNode [ label="{GraphableNode|NodeInterface\nEdgesInterface\n|}", shape=Mrecord ];
	Interface [ label="{Interface||SetStrict(bool) \lSetDir(bool) \lSetName(string) \lAddPortEdge(string, bool, map[string]string) \lAddEdge(string, bool, map[string]string) \lAddNode(string, string, map[string]string) \lAddAttr(string, string) \lAddSubGraph(string, string, map[string]string) \lString() string\l}", shape=Mrecord ];
	NodeInterface [ label="{NodeInterface||Name() string\lAttrs() Attrs\l}", shape=Mrecord ];
	NodeTYPE [ label="{Node|Name string\lAttrs Attrs\l|}", shape=record ];
	Nodes [ label="{Nodes|Lookup map[string]*Node\lNodes []*Node\l|Add(*Node) \lSorted() []*Node\l}", shape=record ];
	Relations [ label="{Relations|ParentToChildren map[string]map[string]bool\lChildToParents map[string]map[string]bool\l|Add(string, string) \lSortedChildren(string) []string\l}", shape=record ];
	SubGraphTYPE [ label="{SubGraph|Attrs Attrs\lName string\l|}", shape=record ];
	SubGraphs [ label="{SubGraphs|SubGraphs map[string]*SubGraph\l|Add(string) \lSorted() []*SubGraph\l}", shape=record ];
	ast_SEL_AList [ label="{ast.AList||String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_Attr [ label="{ast.Attr|Field Id\lValue Id\l|isStmt() \lString() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_AttrList [ label="{ast.AttrList||String() string\lWalk(Visitor) \lGetMap() map[string]string\l}", shape=record ];
	ast_SEL_Bool [ label="{ast.Bool||String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_EdgeAttrs [ label="{ast.EdgeAttrs||isStmt() \lString() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_EdgeOp [ label="{ast.EdgeOp||String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_EdgeRH [ label="{ast.EdgeRH|Op EdgeOp\lDestination Location\l|String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_EdgeRHS [ label="{ast.EdgeRHS||String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_EdgeStmt [ label="{ast.EdgeStmt|Source Location\lEdgeRHS EdgeRHS\lAttrs AttrList\l|isStmt() \lString() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_Elem [ label="{ast.Elem||String() string\l}", shape=Mrecord ];
	ast_SEL_GraphAttrs [ label="{ast.GraphAttrs||isStmt() \lString() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_GraphTYPE [ label="{ast.Graph|Type GraphType\lStrict bool\lId Id\lStmtList StmtList\l|String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_GraphType [ label="{ast.GraphType||String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_Id [ label="{ast.Id||String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_Location [ label="{ast.Location|ast.Elem\nast.Walkable\n|isLocation() \lGetId() Id\lGetPort() Port\lIsNode() bool\l}", shape=Mrecord ];
	ast_SEL_NodeAttrs [ label="{ast.NodeAttrs||isStmt() \lString() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_NodeId [ label="{ast.NodeId|Id Id\lPort Port\l|isLocation() \lIsNode() bool\lString() string\lGetId() Id\lGetPort() Port\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_NodeStmt [ label="{ast.NodeStmt|NodeId *NodeId\lAttrs AttrList\l|isStmt() \lString() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_Port [ label="{ast.Port|Id1 Id\lId2 Id\l|String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_Stmt [ label="{ast.Stmt|ast.Elem\nast.Walkable\n|isStmt() \l}", shape=Mrecord ];
	ast_SEL_StmtList [ label="{ast.StmtList||String() string\lWalk(Visitor) \l}", shape=record ];
	ast_SEL_SubGraphTYPE [ label="{ast.SubGraph|Id Id\lStmtList StmtList\l|isStmt() \lGetId() Id\lGetPort() Port\lString() string\lWalk(Visitor) \lisLocation() \lIsNode() bool\l}", shape=record ];
	ast_SEL_Visitor [ label="{ast.Visitor||Visit(Elem) Visitor\l}", shape=Mrecord ];
	ast_SEL_Walkable [ label="{ast.Walkable||Walk(Visitor) \l}", shape=Mrecord ];
	graphVisitor [ label="{graphVisitor|g Interface\l|Visit(ast.Elem) ast.Visitor\l}", shape=record ];
	nilVisitor [ label="{nilVisitor||Visit(ast.Elem) ast.Visitor\l}", shape=record ];
	parser_SEL_Accept [ label="{parser.Accept||Act() \lString() string\l}", shape=record ];
	parser_SEL_Action [ label="{parser.Action||Act() \lString() string\l}", shape=Mrecord ];
	parser_SEL_ActionRow [ label="{parser.ActionRow||String() string\l}", shape=record ];
	parser_SEL_ActionTab [ label="{parser.ActionTab||}", shape=record ];
	parser_SEL_Attrib [ label="{parser.Attrib||String() string\l}", shape=Mrecord ];
	parser_SEL_GotoRow [ label="{parser.GotoRow||}", shape=record ];
	parser_SEL_GotoTab [ label="{parser.GotoTab||}", shape=record ];
	parser_SEL_NT [ label="{parser.NT||}", shape=record ];
	parser_SEL_Parser [ label="{parser.Parser|actTab ActionTab\lgotoTab GotoTab\lprodTab ProdTab\lstack *stack\lnextToken *token.Token\lpos Position\ltokenMap *token.TokenMap\l|Error(error) error\lTokString(*token.Token) string\lParse(Scanner) (interface\{\}, error)\l}", shape=record ];
	parser_SEL_ProdTab [ label="{parser.ProdTab||}", shape=record ];
	parser_SEL_ProdTabEntry [ label="{parser.ProdTabEntry|String string\lHead NT\lNumSymbols int\lReduceFunc func([]Attrib) (Attrib, error)\l|}", shape=record ];
	parser_SEL_Reduce [ label="{parser.Reduce||Act() \lString() string\l}", shape=record ];
	parser_SEL_Scanner [ label="{parser.Scanner||Scan() (*token.Token, token.Position)\l}", shape=Mrecord ];
	parser_SEL_Shift [ label="{parser.Shift||Act() \lString() string\l}", shape=record ];
	parser_SEL_State [ label="{parser.State||}", shape=record ];
	parser_SEL_stack [ label="{parser.stack|state []State\lattrib []Attrib\l|Push(State, Attrib) \lTop() State\lPopN(int) []Attrib\lString() string\l}", shape=record ];
	scanner_SEL_Error [ label="{scanner.Error|Pos Position\lMsg string\l|String() string\l}", shape=record ];
	scanner_SEL_ErrorHandler [ label="{scanner.ErrorHandler||Error(token.Position, string) \l}", shape=Mrecord ];
	scanner_SEL_Scanner [ label="{scanner.Scanner|src []byte\ltokenMap *token.TokenMap\lpos Position\loffset int\lch rune\lErrorCount int\l|next() \lInit([]byte, *token.TokenMap) \lerror(token.Position, string) \lexpect(rune) \lscanComment(token.Position) \lfindNewline(token.Position) bool\lscanEscape(rune) \lscanChar(token.Position) \lisToken(string) bool\lscanIdentifier() token.Type\lscanNumber() token.Type\lscanHTML() token.Type\lscanSDTLit(token.Position) \lscanString(token.Position) \lscanRawString(token.Position) \lskipWhitespace() \lswitch2(token.Type) token.Type\lswitch3(token.Type, rune, token.Type) token.Type\lswitch4(token.Type, rune, token.Type) token.Type\lScan() (*token.Token, token.Position)\l}", shape=record ];
	stmtVisitor [ label="{stmtVisitor|g Interface\lgraphName string\lcurrentNodeAttrs Attrs\lcurrentEdgeAttrs Attrs\lcurrentGraphAttrs Attrs\l|Visit(ast.Elem) ast.Visitor\lnodeStmt(ast.NodeStmt) ast.Visitor\ledgeStmt(ast.EdgeStmt) ast.Visitor\lnodeAttrs(ast.NodeAttrs) ast.Visitor\ledgeAttrs(ast.EdgeAttrs) ast.Visitor\lgraphAttrs(ast.GraphAttrs) ast.Visitor\lsubGraph(*ast.SubGraph) ast.Visitor\lattr(*ast.Attr) ast.Visitor\l}", shape=record ];
	token_SEL_Position [ label="{token.Position|Offset int\lLine int\lColumn int\l|IsValid() bool\lString() string\l}", shape=record ];
	token_SEL_Token [ label="{token.Token|Type Type\lLit []byte\l|Equals(*Token) bool\lString() string\lIntValue() (int64, error)\lUintValue() (uint64, error)\lSDTVal() string\l}", shape=record ];
	token_SEL_TokenMap [ label="{token.TokenMap|tokenMap []string\lstringMap map[string]Type\l|AddToken(string) \lType(string) Type\lTokenString(Type) string\lString() string\lStrings() []string\lEquals(*TokenMap) bool\lTokens() []*Token\lWriteFile(string) error\l}", shape=record ];
	token_SEL_Type [ label="{token.Type||String() string\l}", shape=record ];
	writer [ label="{writer|Graph\lwrittenLocations map[string]bool\l|newSubGraph(string) *ast.SubGraph\lnewNodeId(string, string) *ast.NodeId\lnewNodeStmt(string) *ast.NodeStmt\lnewLocation(string, string) ast.Location\lnewEdgeStmt(*Edge) *ast.EdgeStmt\lWrite() *ast.Graph\l}", shape=record ];

}

