digraph ast {
	ast_SEL_FieldFilter->ast_SEL_printer[ label=field, style=dashed ];
	ast_SEL_ObjKind->ast_SEL_Object[ label=field, style=dashed ];
	ast_SEL_Scope->ast_SEL_Scope[ label=field, style=dashed ];
	ast_SEL_Object->ast_SEL_Scope[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_CaseClause[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_CaseClause[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_SwitchStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_SwitchStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_SwitchStmt[ label=field, style=dashed ];
	ast_SEL_Scope->ast_SEL_Package[ label=field, style=dashed ];
	ast_SEL_Object->ast_SEL_Package[ label=field, style=dashed ];
	ast_SEL_File->ast_SEL_Package[ label=field, style=dashed ];
	ast_SEL_FuncType->ast_SEL_FuncLit[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_FuncLit[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_UnaryExpr[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_TypeSwitchStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_TypeSwitchStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_GenDecl[ label=field, style=dashed ];
	ast_SEL_Spec->ast_SEL_GenDecl[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_FieldList->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_FuncType->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_CompositeLit[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_RangeStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_RangeStmt[ label=field, style=dashed ];
	ast_SEL_CallExpr->ast_SEL_DeferStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ExprStmt[ label=field, style=dashed ];
	ast_SEL_Object->ast_SEL_Ident[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_SliceExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_CallExpr[ label=field, style=dashed ];
	ast_SEL_ChanDir->ast_SEL_ChanType[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ChanType[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_LabeledStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_LabeledStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_SelectStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_TypeAssertExpr[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_BlockStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_ForStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ForStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_ForStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_Field[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_Field[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_Field[ label=field, style=dashed ];
	ast_SEL_BasicLit->ast_SEL_Field[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_TypeSpec[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_TypeSpec[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_TypeSpec[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_IndexExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_KeyValueExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ArrayType[ label=field, style=dashed ];
	ast_SEL_FieldList->ast_SEL_InterfaceType[ label=field, style=dashed ];
	ast_SEL_CallExpr->ast_SEL_GoStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ReturnStmt[ label=field, style=dashed ];
	ast_SEL_FieldList->ast_SEL_FuncType[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_IfStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_IfStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_IfStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_CommClause[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_Decl->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_Scope->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_ImportSpec->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_Comment->ast_SEL_CommentGroup[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_Ellipsis[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_AssignStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_ImportSpec[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_ImportSpec[ label=field, style=dashed ];
	ast_SEL_BasicLit->ast_SEL_ImportSpec[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_ValueSpec[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_ValueSpec[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ValueSpec[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_StarExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_SendStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ParenExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_SelectorExpr[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_SelectorExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_BinaryExpr[ label=field, style=dashed ];
	ast_SEL_FieldList->ast_SEL_StructType[ label=field, style=dashed ];
	ast_SEL_Decl->ast_SEL_DeclStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_IncDecStmt[ label=field, style=dashed ];
	ast_SEL_Field->ast_SEL_FieldList[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_BranchStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_MapType[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_CommentMap[ label=parent, style=solid ];
	ast_SEL_CommentGroup->ast_SEL_commentListReader[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_byPos[ label=parent, style=solid ];
	ast_SEL_NodeTYPE->ast_SEL_byInterval[ label=parent, style=solid ];
	ast_SEL_NodeTYPE->ast_SEL_nodeStack[ label=parent, style=solid ];
	ast_SEL_Spec->ast_SEL_byImportSpec[ label=parent, style=solid ];
	ast_SEL_CommentGroup->ast_SEL_byCommentPos[ label=parent, style=solid ];
	ast_SEL_inspector->ast_SEL_Visitor[ label=implements, style=bold ];
	ast_SEL_NodeTYPE->ast_SEL_Stmt[ label=inherited, style=solid ];
	ast_SEL_CaseClause->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_SwitchStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_TypeSwitchStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_RangeStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_DeferStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_ExprStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_BadStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_LabeledStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_SelectStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_BlockStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_ForStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_GoStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_ReturnStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_IfStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_CommClause->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_EmptyStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_AssignStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_SendStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_DeclStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_IncDecStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_BranchStmt->ast_SEL_Stmt[ label=implements, style=invis ];
	ast_SEL_CaseClause->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_SwitchStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_BadDecl->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_Package->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_FuncLit->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_UnaryExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_TypeSwitchStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_GenDecl->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_FuncDecl->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_CompositeLit->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_RangeStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_DeferStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_ExprStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_Ident->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_SliceExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_CallExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_ChanType->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_BadStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_LabeledStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_BadExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_SelectStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_TypeAssertExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_BlockStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_ForStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_Field->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_TypeSpec->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_IndexExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_KeyValueExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_ArrayType->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_InterfaceType->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_GoStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_ReturnStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_BasicLit->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_FuncType->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_IfStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_CommClause->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_File->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_CommentGroup->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_Ellipsis->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_EmptyStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_AssignStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_ImportSpec->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_ValueSpec->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_Comment->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_StarExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_SendStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_ParenExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_SelectorExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_BinaryExpr->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_StructType->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_DeclStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_IncDecStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_FieldList->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_BranchStmt->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_MapType->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_NodeTYPE->ast_SEL_Expr[ label=inherited, style=solid ];
	ast_SEL_FuncLit->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_UnaryExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_CompositeLit->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_Ident->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_SliceExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_CallExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_ChanType->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_BadExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_TypeAssertExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_IndexExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_KeyValueExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_ArrayType->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_InterfaceType->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_BasicLit->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_FuncType->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_Ellipsis->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_StarExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_ParenExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_SelectorExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_BinaryExpr->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_StructType->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_MapType->ast_SEL_Expr[ label=implements, style=invis ];
	ast_SEL_NodeTYPE->ast_SEL_Decl[ label=inherited, style=solid ];
	ast_SEL_BadDecl->ast_SEL_Decl[ label=implements, style=bold ];
	ast_SEL_GenDecl->ast_SEL_Decl[ label=implements, style=bold ];
	ast_SEL_FuncDecl->ast_SEL_Decl[ label=implements, style=bold ];
	ast_SEL_NodeTYPE->ast_SEL_Spec[ label=inherited, style=solid ];
	ast_SEL_TypeSpec->ast_SEL_Spec[ label=implements, style=bold ];
	ast_SEL_ImportSpec->ast_SEL_Spec[ label=implements, style=bold ];
	ast_SEL_ValueSpec->ast_SEL_Spec[ label=implements, style=bold ];
	ast_SEL_ArrayType [ label="{ast.ArrayType|Lbrack token.Pos\lLen Expr\lElt Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_AssignStmt [ label="{ast.AssignStmt|Lhs []Expr\lTokPos token.Pos\lTok token.Token\lRhs []Expr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_BadDecl [ label="{ast.BadDecl|From token.Pos\lTo token.Pos\l|Pos() token.Pos\lEnd() token.Pos\ldeclNode() \l}", shape=record ];
	ast_SEL_BadExpr [ label="{ast.BadExpr|From token.Pos\lTo token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_BadStmt [ label="{ast.BadStmt|From token.Pos\lTo token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_BasicLit [ label="{ast.BasicLit|ValuePos token.Pos\lKind token.Token\lValue string\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_BinaryExpr [ label="{ast.BinaryExpr|X Expr\lOpPos token.Pos\lOp token.Token\lY Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_BlockStmt [ label="{ast.BlockStmt|Lbrace token.Pos\lList []Stmt\lRbrace token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_BranchStmt [ label="{ast.BranchStmt|TokPos token.Pos\lTok token.Token\lLabel *Ident\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_CallExpr [ label="{ast.CallExpr|Fun Expr\lLparen token.Pos\lArgs []Expr\lEllipsis token.Pos\lRparen token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_CaseClause [ label="{ast.CaseClause|Case token.Pos\lList []Expr\lColon token.Pos\lBody []Stmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_ChanDir [ label="{ast.ChanDir|int|}", shape=record ];
	ast_SEL_ChanType [ label="{ast.ChanType|Begin token.Pos\lArrow token.Pos\lDir ChanDir\lValue Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_CommClause [ label="{ast.CommClause|Case token.Pos\lComm Stmt\lColon token.Pos\lBody []Stmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_Comment [ label="{ast.Comment|Slash token.Pos\lText string\l|Pos() token.Pos\lEnd() token.Pos\l}", shape=record ];
	ast_SEL_CommentGroup [ label="{ast.CommentGroup|List []*Comment\l|Pos() token.Pos\lEnd() token.Pos\lText() string\l}", shape=record ];
	ast_SEL_CommentMap [ label="{ast.CommentMap|map[Node][]*CommentGroup|addComment(n Node, c *CommentGroup) \lUpdate(old, new Node) Node\lFilter(node Node) CommentMap\lComments() []*CommentGroup\lString() string\l}", shape=record ];
	ast_SEL_CompositeLit [ label="{ast.CompositeLit|Type Expr\lLbrace token.Pos\lElts []Expr\lRbrace token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_Decl [ label="{ast.Decl|Node\n|declNode() \l}", shape=Mrecord ];
	ast_SEL_DeclStmt [ label="{ast.DeclStmt|Decl Decl\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_DeferStmt [ label="{ast.DeferStmt|Defer token.Pos\lCall *CallExpr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_Ellipsis [ label="{ast.Ellipsis|Ellipsis token.Pos\lElt Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_EmptyStmt [ label="{ast.EmptyStmt|Semicolon token.Pos\lImplicit bool\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_Expr [ label="{ast.Expr|*HIGHLY IMPLMENTED*\nNode\n|exprNode() \l}", shape=Mrecord ];
	ast_SEL_ExprStmt [ label="{ast.ExprStmt|X Expr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_Field [ label="{ast.Field|Doc *CommentGroup\lNames []*Ident\lType Expr\lTag *BasicLit\lComment *CommentGroup\l|Pos() token.Pos\lEnd() token.Pos\l}", shape=record ];
	ast_SEL_FieldFilter [ label="{ast.FieldFilter|func(name string, value reflect.Value) bool|}", shape=record ];
	ast_SEL_FieldList [ label="{ast.FieldList|Opening token.Pos\lList []*Field\lClosing token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lNumFields() int\l}", shape=record ];
	ast_SEL_File [ label="{ast.File|Doc *CommentGroup\lPackage token.Pos\lName *Ident\lDecls []Decl\lScope *Scope\lImports []*ImportSpec\lUnresolved []*Ident\lComments []*CommentGroup\l|Pos() token.Pos\lEnd() token.Pos\l}", shape=record ];
	ast_SEL_Filter [ label="{ast.Filter|func(string) bool|}", shape=record ];
	ast_SEL_ForStmt [ label="{ast.ForStmt|For token.Pos\lInit Stmt\lCond Expr\lPost Stmt\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_FuncDecl [ label="{ast.FuncDecl|Doc *CommentGroup\lRecv *FieldList\lName *Ident\lType *FuncType\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\ldeclNode() \l}", shape=record ];
	ast_SEL_FuncLit [ label="{ast.FuncLit|Type *FuncType\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_FuncType [ label="{ast.FuncType|Func token.Pos\lParams *FieldList\lResults *FieldList\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_GenDecl [ label="{ast.GenDecl|Doc *CommentGroup\lTokPos token.Pos\lTok token.Token\lLparen token.Pos\lSpecs []Spec\lRparen token.Pos\l|Pos() token.Pos\lEnd() token.Pos\ldeclNode() \l}", shape=record ];
	ast_SEL_GoStmt [ label="{ast.GoStmt|Go token.Pos\lCall *CallExpr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_Ident [ label="{ast.Ident|NamePos token.Pos\lName string\lObj *Object\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \lIsExported() bool\lString() string\l}", shape=record ];
	ast_SEL_IfStmt [ label="{ast.IfStmt|If token.Pos\lInit Stmt\lCond Expr\lBody *BlockStmt\lElse Stmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_ImportSpec [ label="{ast.ImportSpec|Doc *CommentGroup\lName *Ident\lPath *BasicLit\lComment *CommentGroup\lEndPos token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lspecNode() \l}", shape=record ];
	ast_SEL_Importer [ label="{ast.Importer|func(imports map[string]*Object, path string) (pkg *Object, err error)|}", shape=record ];
	ast_SEL_IncDecStmt [ label="{ast.IncDecStmt|X Expr\lTokPos token.Pos\lTok token.Token\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_IndexExpr [ label="{ast.IndexExpr|X Expr\lLbrack token.Pos\lIndex Expr\lRbrack token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_InterfaceType [ label="{ast.InterfaceType|Interface token.Pos\lMethods *FieldList\lIncomplete bool\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_KeyValueExpr [ label="{ast.KeyValueExpr|Key Expr\lColon token.Pos\lValue Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_LabeledStmt [ label="{ast.LabeledStmt|Label *Ident\lColon token.Pos\lStmt Stmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_MapType [ label="{ast.MapType|Map token.Pos\lKey Expr\lValue Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_MergeMode [ label="{ast.MergeMode|uint|}", shape=record ];
	ast_SEL_NodeTYPE [ label="{ast.Node|*HIGHLY IMPLMENTED*\n|Pos() token.Pos\lEnd() token.Pos\l}", shape=Mrecord ];
	ast_SEL_ObjKind [ label="{ast.ObjKind|int|String() string\l}", shape=record ];
	ast_SEL_Object [ label="{ast.Object|Kind ObjKind\lName string\lDecl interface\{\}\lData interface\{\}\lType interface\{\}\l|Pos() token.Pos\l}", shape=record ];
	ast_SEL_Package [ label="{ast.Package|Name string\lScope *Scope\lImports map[string]*Object\lFiles map[string]*File\l|Pos() token.Pos\lEnd() token.Pos\l}", shape=record ];
	ast_SEL_ParenExpr [ label="{ast.ParenExpr|Lparen token.Pos\lX Expr\lRparen token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_RangeStmt [ label="{ast.RangeStmt|For token.Pos\lKey Expr\lValue Expr\lTokPos token.Pos\lTok token.Token\lX Expr\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_ReturnStmt [ label="{ast.ReturnStmt|Return token.Pos\lResults []Expr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_Scope [ label="{ast.Scope|Outer *Scope\lObjects map[string]*Object\l|Lookup(name string) *Object\lInsert(obj *Object) (alt *Object)\lString() string\l}", shape=record ];
	ast_SEL_SelectStmt [ label="{ast.SelectStmt|Select token.Pos\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_SelectorExpr [ label="{ast.SelectorExpr|X Expr\lSel *Ident\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_SendStmt [ label="{ast.SendStmt|Chan Expr\lArrow token.Pos\lValue Expr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_SliceExpr [ label="{ast.SliceExpr|X Expr\lLbrack token.Pos\lLow Expr\lHigh Expr\lMax Expr\lSlice3 bool\lRbrack token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_Spec [ label="{ast.Spec|Node\n|specNode() \l}", shape=Mrecord ];
	ast_SEL_StarExpr [ label="{ast.StarExpr|Star token.Pos\lX Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_Stmt [ label="{ast.Stmt|*HIGHLY IMPLMENTED*\nNode\n|stmtNode() \l}", shape=Mrecord ];
	ast_SEL_StructType [ label="{ast.StructType|Struct token.Pos\lFields *FieldList\lIncomplete bool\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_SwitchStmt [ label="{ast.SwitchStmt|Switch token.Pos\lInit Stmt\lTag Expr\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_TypeAssertExpr [ label="{ast.TypeAssertExpr|X Expr\lLparen token.Pos\lType Expr\lRparen token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_TypeSpec [ label="{ast.TypeSpec|Doc *CommentGroup\lName *Ident\lType Expr\lComment *CommentGroup\l|Pos() token.Pos\lEnd() token.Pos\lspecNode() \l}", shape=record ];
	ast_SEL_TypeSwitchStmt [ label="{ast.TypeSwitchStmt|Switch token.Pos\lInit Stmt\lAssign Stmt\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode() \l}", shape=record ];
	ast_SEL_UnaryExpr [ label="{ast.UnaryExpr|OpPos token.Pos\lOp token.Token\lX Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode() \l}", shape=record ];
	ast_SEL_ValueSpec [ label="{ast.ValueSpec|Doc *CommentGroup\lNames []*Ident\lType Expr\lValues []Expr\lComment *CommentGroup\l|Pos() token.Pos\lEnd() token.Pos\lspecNode() \l}", shape=record ];
	ast_SEL_Visitor [ label="{ast.Visitor||Visit(node Node) (w Visitor)\l}", shape=Mrecord ];
	ast_SEL_byCommentPos [ label="{ast.byCommentPos|[]*CommentGroup|Len() int\lSwap(i, j int) \lLess(i, j int) bool\l}", shape=record ];
	ast_SEL_byImportSpec [ label="{ast.byImportSpec|[]Spec|Len() int\lSwap(i, j int) \lLess(i, j int) bool\l}", shape=record ];
	ast_SEL_byInterval [ label="{ast.byInterval|[]Node|Len() int\lLess(i, j int) bool\lSwap(i, j int) \l}", shape=record ];
	ast_SEL_byPos [ label="{ast.byPos|[]*CommentGroup|Len() int\lLess(i, j int) bool\lSwap(i, j int) \l}", shape=record ];
	ast_SEL_commentListReader [ label="{ast.commentListReader|fset *token.FileSet\llist []*CommentGroup\lindex int\lcomment *CommentGroup\lpos token.Position\lend token.Position\l|eol() bool\lnext() \l}", shape=record ];
	ast_SEL_inspector [ label="{ast.inspector|func(Node) bool|Visit(node Node) (w Visitor)\l}", shape=record ];
	ast_SEL_localError [ label="{ast.localError|err error\l|}", shape=record ];
	ast_SEL_nodeStack [ label="{ast.nodeStack|[]Node|push(n Node) \lpop(pos token.Pos) (top Node)\l}", shape=record ];
	ast_SEL_pkgBuilder [ label="{ast.pkgBuilder|fset *token.FileSet\lerrors scanner.ErrorList\l|error(pos token.Pos, msg string) \lerrorf(pos token.Pos, format string, args ...) \ldeclare(scope, altScope *Scope, obj *Object) \l}", shape=record ];
	ast_SEL_posSpan [ label="{ast.posSpan|Start token.Pos\lEnd token.Pos\l|}", shape=record ];
	ast_SEL_printer [ label="{ast.printer|output io.Writer\lfset *token.FileSet\lfilter FieldFilter\lptrmap map[interface\{\}]int\lindent int\llast byte\lline int\l|Write(data []byte) (n int, err error)\lprintf(format string, args ...) \lprint(x reflect.Value) \l}", shape=record ];

}

