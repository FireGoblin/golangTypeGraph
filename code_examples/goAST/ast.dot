digraph ast {
	ast_SEL_CommentGroup->ast_SEL_byCommentPos[ label=parent, style=solid ];
	token_SEL_Pos->ast_SEL_posSpan[ label=field, style=dashed ];
	ast_SEL_Spec->ast_SEL_byImportSpec[ label=parent, style=solid ];
	io_SEL_Writer->ast_SEL_printer[ label=field, style=dashed ];
	token_SEL_FileSet->ast_SEL_printer[ label=field, style=dashed ];
	ast_SEL_FieldFilter->ast_SEL_printer[ label=field, style=dashed ];
	token_SEL_FileSet->ast_SEL_pkgBuilder[ label=field, style=dashed ];
	scanner_SEL_ErrorList->ast_SEL_pkgBuilder[ label=field, style=dashed ];
	ast_SEL_Scope->ast_SEL_Scope[ label=field, style=dashed ];
	ast_SEL_Object->ast_SEL_Scope[ label=field, style=dashed ];
	ast_SEL_ObjKind->ast_SEL_Object[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_ArrayType[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ArrayType[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_SendStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_SendStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_BlockStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_BlockStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_ValueSpec[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_ValueSpec[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ValueSpec[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_BadDecl[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_TypeAssertExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_TypeAssertExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_AssignStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_AssignStmt[ label=field, style=dashed ];
	token_SEL_Token->ast_SEL_AssignStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_CaseClause[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_CaseClause[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_CaseClause[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_GoStmt[ label=field, style=dashed ];
	ast_SEL_CallExpr->ast_SEL_GoStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_BranchStmt[ label=field, style=dashed ];
	token_SEL_Token->ast_SEL_BranchStmt[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_BranchStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_RangeStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_RangeStmt[ label=field, style=dashed ];
	token_SEL_Token->ast_SEL_RangeStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_RangeStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_Ellipsis[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_Ellipsis[ label=field, style=dashed ];
	ast_SEL_Decl->ast_SEL_DeclStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_EmptyStmt[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_LabeledStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_LabeledStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_LabeledStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_Field[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_Field[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_Field[ label=field, style=dashed ];
	ast_SEL_BasicLit->ast_SEL_Field[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_InterfaceType[ label=field, style=dashed ];
	ast_SEL_FieldList->ast_SEL_InterfaceType[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_FieldList[ label=field, style=dashed ];
	ast_SEL_Field->ast_SEL_FieldList[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_KeyValueExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_KeyValueExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_BadStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ExprStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_TypeSwitchStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_TypeSwitchStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_TypeSwitchStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_TypeSpec[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_TypeSpec[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_TypeSpec[ label=field, style=dashed ];
	ast_SEL_Comment->ast_SEL_CommentGroup[ label=field, style=dashed ];
	ast_SEL_FuncType->ast_SEL_FuncLit[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_FuncLit[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_Comment[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_StarExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_StarExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_MapType[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_MapType[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_CompositeLit[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_CompositeLit[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_SelectorExpr[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_SelectorExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_ReturnStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ReturnStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_FieldList->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_FuncType->ast_SEL_FuncDecl[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_FuncDecl[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_BadExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_ForStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_ForStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ForStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_ForStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_GenDecl[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_GenDecl[ label=field, style=dashed ];
	token_SEL_Token->ast_SEL_GenDecl[ label=field, style=dashed ];
	ast_SEL_Spec->ast_SEL_GenDecl[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_Ident[ label=field, style=dashed ];
	ast_SEL_Object->ast_SEL_Ident[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_SelectStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_SelectStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_ChanType[ label=field, style=dashed ];
	ast_SEL_ChanDir->ast_SEL_ChanType[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ChanType[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_SwitchStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_SwitchStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_SwitchStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_SwitchStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_BasicLit[ label=field, style=dashed ];
	token_SEL_Token->ast_SEL_BasicLit[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_IndexExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_IndexExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_UnaryExpr[ label=field, style=dashed ];
	token_SEL_Token->ast_SEL_UnaryExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_UnaryExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_FuncType[ label=field, style=dashed ];
	ast_SEL_FieldList->ast_SEL_FuncType[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_IncDecStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_IncDecStmt[ label=field, style=dashed ];
	token_SEL_Token->ast_SEL_IncDecStmt[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_CommClause[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_CommClause[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_SliceExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_SliceExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_ParenExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_ParenExpr[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_BinaryExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_BinaryExpr[ label=field, style=dashed ];
	token_SEL_Token->ast_SEL_BinaryExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_StructType[ label=field, style=dashed ];
	ast_SEL_FieldList->ast_SEL_StructType[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_DeferStmt[ label=field, style=dashed ];
	ast_SEL_CallExpr->ast_SEL_DeferStmt[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_ImportSpec[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_ImportSpec[ label=field, style=dashed ];
	ast_SEL_BasicLit->ast_SEL_ImportSpec[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_ImportSpec[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_File[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_Ident->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_Decl->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_Scope->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_ImportSpec->ast_SEL_File[ label=field, style=dashed ];
	ast_SEL_Scope->ast_SEL_Package[ label=field, style=dashed ];
	ast_SEL_Object->ast_SEL_Package[ label=field, style=dashed ];
	ast_SEL_File->ast_SEL_Package[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_CallExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_CallExpr[ label=field, style=dashed ];
	token_SEL_Pos->ast_SEL_IfStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_IfStmt[ label=field, style=dashed ];
	ast_SEL_Expr->ast_SEL_IfStmt[ label=field, style=dashed ];
	ast_SEL_BlockStmt->ast_SEL_IfStmt[ label=field, style=dashed ];
	ast_SEL_NodeTYPE->ast_SEL_nodeStack[ label=parent, style=solid ];
	ast_SEL_CommentGroup->ast_SEL_byPos[ label=parent, style=solid ];
	ast_SEL_CommentGroup->ast_SEL_CommentMap[ label=parent, style=solid ];
	ast_SEL_NodeTYPE->ast_SEL_byInterval[ label=parent, style=solid ];
	token_SEL_FileSet->ast_SEL_commentListReader[ label=field, style=dashed ];
	ast_SEL_CommentGroup->ast_SEL_commentListReader[ label=field, style=dashed ];
	token_SEL_Position->ast_SEL_commentListReader[ label=field, style=dashed ];
	unicode_SEL_d->unicode_SEL_CaseRange[ label=field, style=dashed ];
	unicode_SEL_Range16->unicode_SEL_RangeTable[ label=field, style=dashed ];
	unicode_SEL_Range32->unicode_SEL_RangeTable[ label=field, style=dashed ];
	unicode_SEL_CaseRange->unicode_SEL_SpecialCase[ label=parent, style=solid ];
	os_SEL_File->reader[ label=field, style=dashed ];
	io_SEL_Writer->strings_SEL_stringWriter[ label=field, style=dashed ];
	strings_SEL_replacer->strings_SEL_Replacer[ label=field, style=dashed ];
	strings_SEL_trieNode->strings_SEL_trieNode[ label=field, style=dashed ];
	strings_SEL_trieNode->strings_SEL_genericReplacer[ label=field, style=dashed ];
	strings_SEL_stringFinder->strings_SEL_singleStringReplacer[ label=field, style=dashed ];
	bytes_SEL_readOp->bytes_SEL_Buffer[ label=field, style=dashed ];
	token_SEL_Position->scanner_SEL_Error[ label=field, style=dashed ];
	scanner_SEL_Error->scanner_SEL_ErrorList[ label=parent, style=solid ];
	token_SEL_File->scanner_SEL_Scanner[ label=field, style=dashed ];
	scanner_SEL_ErrorHandler->scanner_SEL_Scanner[ label=field, style=dashed ];
	scanner_SEL_Mode->scanner_SEL_Scanner[ label=field, style=dashed ];
	reflect_SEL_Type->reflect_SEL_visit[ label=field, style=dashed ];
	reflect_SEL_bitVector->reflect_SEL_makeFuncImpl[ label=field, style=dashed ];
	reflect_SEL_funcType->reflect_SEL_makeFuncImpl[ label=field, style=dashed ];
	reflect_SEL_bitVector->reflect_SEL_methodValue[ label=field, style=dashed ];
	reflect_SEL_Value->reflect_SEL_methodValue[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_method[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_imethod[ label=field, style=dashed ];
	reflect_SEL_Type->reflect_SEL_Method[ label=field, style=dashed ];
	reflect_SEL_Value->reflect_SEL_Method[ label=field, style=dashed ];
	reflect_SEL_Type->reflect_SEL_StructField[ label=field, style=dashed ];
	reflect_SEL_StructTag->reflect_SEL_StructField[ label=field, style=dashed ];
	reflect_SEL_typeAlg->reflect_SEL_rtype[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_rtype[ label=field, style=dashed ];
	reflect_SEL_uncommonType->reflect_SEL_rtype[ label=inherited, style=solid ];
	reflect_SEL_Kind->reflect_SEL_cacheKey[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_cacheKey[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_ptrType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_ptrType[ label=inherited, style=solid ];
	reflect_SEL_method->reflect_SEL_uncommonType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_arrayType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_arrayType[ label=inherited, style=solid ];
	reflect_SEL_imethod->reflect_SEL_interfaceType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_interfaceType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_sliceType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_sliceType[ label=inherited, style=solid ];
	reflect_SEL_structType->reflect_SEL_fieldScan[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_structField[ label=field, style=dashed ];
	reflect_SEL_structField->reflect_SEL_structType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_structType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_layoutType[ label=field, style=dashed ];
	reflect_SEL_bitVector->reflect_SEL_layoutType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_chanType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_chanType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_layoutKey[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_mapType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_mapType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_funcType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_funcType[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_runtimeSelect[ label=field, style=dashed ];
	reflect_SEL_Kind->reflect_SEL_ValueError[ label=field, style=dashed ];
	reflect_SEL_SelectDir->reflect_SEL_SelectCase[ label=field, style=dashed ];
	reflect_SEL_Value->reflect_SEL_SelectCase[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_Value[ label=field, style=dashed ];
	reflect_SEL_flag->reflect_SEL_Value[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_emptyInterface[ label=field, style=dashed ];
	os_SEL_File->os_SEL_ProcAttr[ label=field, style=dashed ];
	os_SEL_FileMode->os_SEL_fileStat[ label=field, style=dashed ];
	os_SEL_file->os_SEL_File[ label=inherited, style=solid ];
	os_SEL_dirInfo->os_SEL_file[ label=field, style=dashed ];
	io_SEL_ReaderAt->io_SEL_SectionReader[ label=field, style=dashed ];
	io_SEL_Reader->io_SEL_LimitedReader[ label=field, style=dashed ];
	io_SEL_Reader->io_SEL_teeReader[ label=field, style=dashed ];
	io_SEL_Writer->io_SEL_teeReader[ label=field, style=dashed ];
	io_SEL_Reader->io_SEL_multiReader[ label=field, style=dashed ];
	io_SEL_Writer->io_SEL_multiWriter[ label=field, style=dashed ];
	io_SEL_pipe->io_SEL_PipeReader[ label=field, style=dashed ];
	io_SEL_pipe->io_SEL_PipeWriter[ label=field, style=dashed ];
	io_SEL_RuneReader->fmt_SEL_ss[ label=field, style=dashed ];
	fmt_SEL_buffer->fmt_SEL_ss[ label=field, style=dashed ];
	fmt_SEL_ssave->fmt_SEL_ss[ label=inherited, style=solid ];
	io_SEL_Reader->fmt_SEL_readRune[ label=field, style=dashed ];
	fmt_SEL_buffer->fmt_SEL_fmt[ label=field, style=dashed ];
	fmt_SEL_fmtFlags->fmt_SEL_fmt[ label=inherited, style=solid ];
	fmt_SEL_buffer->fmt_SEL_pp[ label=field, style=dashed ];
	reflect_SEL_Value->fmt_SEL_pp[ label=field, style=dashed ];
	fmt_SEL_fmt->fmt_SEL_pp[ label=field, style=dashed ];
	sort_SEL_Interface->sort_SEL_reverse[ label=inherited, style=solid ];
	token_SEL_File->token_SEL_FileSet[ label=field, style=dashed ];
	token_SEL_FileSet->token_SEL_File[ label=field, style=dashed ];
	token_SEL_lineInfo->token_SEL_File[ label=field, style=dashed ];
	token_SEL_lineInfo->token_SEL_serializedFile[ label=field, style=dashed ];
	token_SEL_serializedFile->token_SEL_serializedFileSet[ label=field, style=dashed ];
	ast_SEL_inspector->ast_SEL_Visitor[ label=implements, style=bold ];
	ast_SEL_NodeTYPE->ast_SEL_Stmt[ label=inherited, style=solid ];
	ast_SEL_NodeTYPE->ast_SEL_NodeTYPE[ label=implements, style=invis ];
	ast_SEL_NodeTYPE->ast_SEL_Expr[ label=inherited, style=solid ];
	ast_SEL_NodeTYPE->ast_SEL_Spec[ label=inherited, style=solid ];
	ast_SEL_ValueSpec->ast_SEL_Spec[ label=implements, style=bold ];
	ast_SEL_TypeSpec->ast_SEL_Spec[ label=implements, style=bold ];
	ast_SEL_ImportSpec->ast_SEL_Spec[ label=implements, style=bold ];
	ast_SEL_NodeTYPE->ast_SEL_Decl[ label=inherited, style=solid ];
	ast_SEL_BadDecl->ast_SEL_Decl[ label=implements, style=bold ];
	ast_SEL_FuncDecl->ast_SEL_Decl[ label=implements, style=bold ];
	ast_SEL_GenDecl->ast_SEL_Decl[ label=implements, style=bold ];
	strings_SEL_appendSliceWriter->strings_SEL_stringWriterIface[ label=implements, style=bold ];
	strings_SEL_stringWriter->strings_SEL_stringWriterIface[ label=implements, style=bold ];
	bytes_SEL_Buffer->strings_SEL_stringWriterIface[ label=implements, style=bold ];
	os_SEL_File->strings_SEL_stringWriterIface[ label=implements, style=bold ];
	fmt_SEL_buffer->strings_SEL_stringWriterIface[ label=implements, style=bold ];
	strings_SEL_Replacer->strings_SEL_replacer[ label=implements, style=bold ];
	strings_SEL_genericReplacer->strings_SEL_replacer[ label=implements, style=bold ];
	strings_SEL_byteReplacer->strings_SEL_replacer[ label=implements, style=bold ];
	strings_SEL_byteStringReplacer->strings_SEL_replacer[ label=implements, style=bold ];
	strings_SEL_singleStringReplacer->strings_SEL_replacer[ label=implements, style=bold ];
	reflect_SEL_rtype->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_ptrType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_arrayType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_interfaceType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_sliceType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_structType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_chanType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_mapType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_funcType->reflect_SEL_Type[ label=implements, style=bold ];
	os_SEL_fileStat->os_SEL_FileInfo[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_ReaderFrom[ label=implements, style=bold ];
	io_SEL_Writer->io_SEL_WriteSeeker[ label=inherited, style=solid ];
	io_SEL_Seeker->io_SEL_WriteSeeker[ label=inherited, style=solid ];
	os_SEL_File->io_SEL_WriteSeeker[ label=implements, style=bold ];
	os_SEL_File->io_SEL_WriterAt[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_ByteWriter[ label=implements, style=bold ];
	fmt_SEL_buffer->io_SEL_ByteWriter[ label=implements, style=bold ];
	strings_SEL_Reader->io_SEL_WriterTo[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_WriterTo[ label=implements, style=bold ];
	bytes_SEL_Reader->io_SEL_WriterTo[ label=implements, style=bold ];
	io_SEL_RuneReader->io_SEL_RuneScanner[ label=inherited, style=solid ];
	strings_SEL_Reader->io_SEL_RuneScanner[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_RuneScanner[ label=implements, style=bold ];
	bytes_SEL_Reader->io_SEL_RuneScanner[ label=implements, style=bold ];
	fmt_SEL_ss->io_SEL_RuneScanner[ label=implements, style=bold ];
	io_SEL_Writer->io_SEL_WriteCloser[ label=inherited, style=solid ];
	io_SEL_Closer->io_SEL_WriteCloser[ label=inherited, style=solid ];
	os_SEL_File->io_SEL_WriteCloser[ label=implements, style=bold ];
	io_SEL_PipeWriter->io_SEL_WriteCloser[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadWriteCloser[ label=inherited, style=solid ];
	io_SEL_Writer->io_SEL_ReadWriteCloser[ label=inherited, style=solid ];
	io_SEL_Closer->io_SEL_ReadWriteCloser[ label=inherited, style=solid ];
	os_SEL_File->io_SEL_ReadWriteCloser[ label=implements, style=bold ];
	strings_SEL_Reader->io_SEL_ByteReader[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_ByteReader[ label=implements, style=bold ];
	bytes_SEL_Reader->io_SEL_ByteReader[ label=implements, style=bold ];
	io_SEL_ByteReader->io_SEL_ByteScanner[ label=inherited, style=solid ];
	strings_SEL_Reader->io_SEL_ByteScanner[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_ByteScanner[ label=implements, style=bold ];
	bytes_SEL_Reader->io_SEL_ByteScanner[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_Reader[ label=implements, style=invis ];
	os_SEL_File->io_SEL_Closer[ label=implements, style=bold ];
	io_SEL_PipeReader->io_SEL_Closer[ label=implements, style=bold ];
	io_SEL_PipeWriter->io_SEL_Closer[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadCloser[ label=inherited, style=solid ];
	io_SEL_Closer->io_SEL_ReadCloser[ label=inherited, style=solid ];
	os_SEL_File->io_SEL_ReadCloser[ label=implements, style=bold ];
	io_SEL_PipeReader->io_SEL_ReadCloser[ label=implements, style=bold ];
	ast_SEL_printer->io_SEL_Writer[ label=implements, style=bold ];
	strings_SEL_appendSliceWriter->io_SEL_Writer[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_Writer[ label=implements, style=bold ];
	os_SEL_File->io_SEL_Writer[ label=implements, style=bold ];
	io_SEL_multiWriter->io_SEL_Writer[ label=implements, style=bold ];
	io_SEL_PipeWriter->io_SEL_Writer[ label=implements, style=bold ];
	fmt_SEL_buffer->io_SEL_Writer[ label=implements, style=bold ];
	fmt_SEL_pp->io_SEL_Writer[ label=implements, style=bold ];
	strings_SEL_Reader->io_SEL_Seeker[ label=implements, style=bold ];
	bytes_SEL_Reader->io_SEL_Seeker[ label=implements, style=bold ];
	os_SEL_File->io_SEL_Seeker[ label=implements, style=bold ];
	io_SEL_SectionReader->io_SEL_Seeker[ label=implements, style=bold ];
	strings_SEL_Reader->io_SEL_ReaderAt[ label=implements, style=bold ];
	bytes_SEL_Reader->io_SEL_ReaderAt[ label=implements, style=bold ];
	os_SEL_File->io_SEL_ReaderAt[ label=implements, style=bold ];
	io_SEL_SectionReader->io_SEL_ReaderAt[ label=implements, style=bold ];
	strings_SEL_appendSliceWriter->io_SEL_stringWriter[ label=implements, style=bold ];
	strings_SEL_stringWriter->io_SEL_stringWriter[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_stringWriter[ label=implements, style=bold ];
	os_SEL_File->io_SEL_stringWriter[ label=implements, style=bold ];
	fmt_SEL_buffer->io_SEL_stringWriter[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadWriter[ label=inherited, style=solid ];
	io_SEL_Writer->io_SEL_ReadWriter[ label=inherited, style=solid ];
	bytes_SEL_Buffer->io_SEL_ReadWriter[ label=implements, style=bold ];
	os_SEL_File->io_SEL_ReadWriter[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadSeeker[ label=inherited, style=solid ];
	io_SEL_Seeker->io_SEL_ReadSeeker[ label=inherited, style=solid ];
	strings_SEL_Reader->io_SEL_ReadSeeker[ label=implements, style=bold ];
	bytes_SEL_Reader->io_SEL_ReadSeeker[ label=implements, style=bold ];
	os_SEL_File->io_SEL_ReadSeeker[ label=implements, style=bold ];
	io_SEL_SectionReader->io_SEL_ReadSeeker[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadWriteSeeker[ label=inherited, style=solid ];
	io_SEL_Writer->io_SEL_ReadWriteSeeker[ label=inherited, style=solid ];
	io_SEL_Seeker->io_SEL_ReadWriteSeeker[ label=inherited, style=solid ];
	os_SEL_File->io_SEL_ReadWriteSeeker[ label=implements, style=bold ];
	strings_SEL_Reader->io_SEL_RuneReader[ label=implements, style=bold ];
	bytes_SEL_Buffer->io_SEL_RuneReader[ label=implements, style=bold ];
	bytes_SEL_Reader->io_SEL_RuneReader[ label=implements, style=bold ];
	fmt_SEL_ss->io_SEL_RuneReader[ label=implements, style=bold ];
	fmt_SEL_readRune->io_SEL_RuneReader[ label=implements, style=bold ];
	fmt_SEL_ss->fmt_SEL_ScanState[ label=implements, style=bold ];
	strings_SEL_Reader->fmt_SEL_runeUnreader[ label=implements, style=bold ];
	bytes_SEL_Buffer->fmt_SEL_runeUnreader[ label=implements, style=bold ];
	bytes_SEL_Reader->fmt_SEL_runeUnreader[ label=implements, style=bold ];
	fmt_SEL_ss->fmt_SEL_runeUnreader[ label=implements, style=bold ];
	fmt_SEL_Stringer->fmt_SEL_Stringer[ label=implements, style=invis ];
	fmt_SEL_pp->fmt_SEL_State[ label=implements, style=bold ];
	sort_SEL_Interface->sort_SEL_Interface[ label=implements, style=invis ];
	ast_SEL_ArrayType [ label="{ast.ArrayType|Lbrack token.Pos\lLen Expr\lElt Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_AssignStmt [ label="{ast.AssignStmt|Lhs []Expr\lTokPos token.Pos\lTok token.Token\lRhs []Expr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_BadDecl [ label="{ast.BadDecl|From token.Pos\lTo token.Pos\l|Pos() token.Pos\lEnd() token.Pos\ldeclNode()\l}", shape=record ];
	ast_SEL_BadExpr [ label="{ast.BadExpr|From token.Pos\lTo token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_BadStmt [ label="{ast.BadStmt|From token.Pos\lTo token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_BasicLit [ label="{ast.BasicLit|ValuePos token.Pos\lKind token.Token\lValue string\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_BinaryExpr [ label="{ast.BinaryExpr|X Expr\lOpPos token.Pos\lOp token.Token\lY Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_BlockStmt [ label="{ast.BlockStmt|Lbrace token.Pos\lList []Stmt\lRbrace token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_BranchStmt [ label="{ast.BranchStmt|TokPos token.Pos\lTok token.Token\lLabel *Ident\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_CallExpr [ label="{ast.CallExpr|Fun Expr\lLparen token.Pos\lArgs []Expr\lEllipsis token.Pos\lRparen token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_CaseClause [ label="{ast.CaseClause|Case token.Pos\lList []Expr\lColon token.Pos\lBody []Stmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_ChanDir [ label="{ast.ChanDir|int|}", shape=record ];
	ast_SEL_ChanType [ label="{ast.ChanType|Begin token.Pos\lArrow token.Pos\lDir ChanDir\lValue Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_CommClause [ label="{ast.CommClause|Case token.Pos\lComm Stmt\lColon token.Pos\lBody []Stmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_Comment [ label="{ast.Comment|Slash token.Pos\lText string\l|Pos() token.Pos\lEnd() token.Pos\l}", shape=record ];
	ast_SEL_CommentGroup [ label="{ast.CommentGroup|List []*Comment\l|Pos() token.Pos\lEnd() token.Pos\lText() string\l}", shape=record ];
	ast_SEL_CommentMap [ label="{ast.CommentMap|map[Node][]*CommentGroup|addComment(ast.Node, *ast.CommentGroup)\lUpdate(ast.Node, ast.Node) ast.Node\lFilter(ast.Node) ast.CommentMap\lComments() []*ast.CommentGroup\lString() string\l}", shape=record ];
	ast_SEL_CompositeLit [ label="{ast.CompositeLit|Type Expr\lLbrace token.Pos\lElts []Expr\lRbrace token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_Decl [ label="{ast.Decl|Node\n|declNode()\l}", shape=Mrecord ];
	ast_SEL_DeclStmt [ label="{ast.DeclStmt|Decl Decl\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_DeferStmt [ label="{ast.DeferStmt|Defer token.Pos\lCall *CallExpr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_Ellipsis [ label="{ast.Ellipsis|Ellipsis token.Pos\lElt Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_EmptyStmt [ label="{ast.EmptyStmt|Semicolon token.Pos\lImplicit bool\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_Expr [ label="{ast.Expr|*HIGHLY IMPLMENTED*\nNode\n|exprNode()\l}", shape=Mrecord ];
	ast_SEL_ExprStmt [ label="{ast.ExprStmt|X Expr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_Field [ label="{ast.Field|Doc *CommentGroup\lNames []*Ident\lType Expr\lTag *BasicLit\lComment *CommentGroup\l|Pos() token.Pos\lEnd() token.Pos\l}", shape=record ];
	ast_SEL_FieldFilter [ label="{ast.FieldFilter|func(name string, value reflect.Value) bool|}", shape=record ];
	ast_SEL_FieldList [ label="{ast.FieldList|Opening token.Pos\lList []*Field\lClosing token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lNumFields() int\l}", shape=record ];
	ast_SEL_File [ label="{ast.File|Doc *CommentGroup\lPackage token.Pos\lName *Ident\lDecls []Decl\lScope *Scope\lImports []*ImportSpec\lUnresolved []*Ident\lComments []*CommentGroup\l|Pos() token.Pos\lEnd() token.Pos\l}", shape=record ];
	ast_SEL_ForStmt [ label="{ast.ForStmt|For token.Pos\lInit Stmt\lCond Expr\lPost Stmt\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_FuncDecl [ label="{ast.FuncDecl|Doc *CommentGroup\lRecv *FieldList\lName *Ident\lType *FuncType\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\ldeclNode()\l}", shape=record ];
	ast_SEL_FuncLit [ label="{ast.FuncLit|Type *FuncType\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_FuncType [ label="{ast.FuncType|Func token.Pos\lParams *FieldList\lResults *FieldList\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_GenDecl [ label="{ast.GenDecl|Doc *CommentGroup\lTokPos token.Pos\lTok token.Token\lLparen token.Pos\lSpecs []Spec\lRparen token.Pos\l|Pos() token.Pos\lEnd() token.Pos\ldeclNode()\l}", shape=record ];
	ast_SEL_GoStmt [ label="{ast.GoStmt|Go token.Pos\lCall *CallExpr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_Ident [ label="{ast.Ident|NamePos token.Pos\lName string\lObj *Object\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\lIsExported() bool\lString() string\l}", shape=record ];
	ast_SEL_IfStmt [ label="{ast.IfStmt|If token.Pos\lInit Stmt\lCond Expr\lBody *BlockStmt\lElse Stmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_ImportSpec [ label="{ast.ImportSpec|Doc *CommentGroup\lName *Ident\lPath *BasicLit\lComment *CommentGroup\lEndPos token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lspecNode()\l}", shape=record ];
	ast_SEL_IncDecStmt [ label="{ast.IncDecStmt|X Expr\lTokPos token.Pos\lTok token.Token\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_IndexExpr [ label="{ast.IndexExpr|X Expr\lLbrack token.Pos\lIndex Expr\lRbrack token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_InterfaceType [ label="{ast.InterfaceType|Interface token.Pos\lMethods *FieldList\lIncomplete bool\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_KeyValueExpr [ label="{ast.KeyValueExpr|Key Expr\lColon token.Pos\lValue Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_LabeledStmt [ label="{ast.LabeledStmt|Label *Ident\lColon token.Pos\lStmt Stmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_MapType [ label="{ast.MapType|Map token.Pos\lKey Expr\lValue Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_NodeTYPE [ label="{ast.Node|*HIGHLY IMPLMENTED*\n|Pos() token.Pos\lEnd() token.Pos\l}", shape=Mrecord ];
	ast_SEL_ObjKind [ label="{ast.ObjKind|int|String() string\l}", shape=record ];
	ast_SEL_Object [ label="{ast.Object|Kind ObjKind\lName string\lDecl interface\{\}\lData interface\{\}\lType interface\{\}\l|Pos() token.Pos\l}", shape=record ];
	ast_SEL_Package [ label="{ast.Package|Name string\lScope *Scope\lImports map[string]*Object\lFiles map[string]*File\l|Pos() token.Pos\lEnd() token.Pos\l}", shape=record ];
	ast_SEL_ParenExpr [ label="{ast.ParenExpr|Lparen token.Pos\lX Expr\lRparen token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_RangeStmt [ label="{ast.RangeStmt|For token.Pos\lKey Expr\lValue Expr\lTokPos token.Pos\lTok token.Token\lX Expr\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_ReturnStmt [ label="{ast.ReturnStmt|Return token.Pos\lResults []Expr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_Scope [ label="{ast.Scope|Outer *Scope\lObjects map[string]*Object\l|Lookup(string) *ast.Object\lInsert(*ast.Object) *ast.Object\lString() string\l}", shape=record ];
	ast_SEL_SelectStmt [ label="{ast.SelectStmt|Select token.Pos\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_SelectorExpr [ label="{ast.SelectorExpr|X Expr\lSel *Ident\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_SendStmt [ label="{ast.SendStmt|Chan Expr\lArrow token.Pos\lValue Expr\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_SliceExpr [ label="{ast.SliceExpr|X Expr\lLbrack token.Pos\lLow Expr\lHigh Expr\lMax Expr\lSlice3 bool\lRbrack token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_Spec [ label="{ast.Spec|Node\n|specNode()\l}", shape=Mrecord ];
	ast_SEL_StarExpr [ label="{ast.StarExpr|Star token.Pos\lX Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_Stmt [ label="{ast.Stmt|*HIGHLY IMPLMENTED*\nNode\n|stmtNode()\l}", shape=Mrecord ];
	ast_SEL_StructType [ label="{ast.StructType|Struct token.Pos\lFields *FieldList\lIncomplete bool\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_SwitchStmt [ label="{ast.SwitchStmt|Switch token.Pos\lInit Stmt\lTag Expr\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_TypeAssertExpr [ label="{ast.TypeAssertExpr|X Expr\lLparen token.Pos\lType Expr\lRparen token.Pos\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_TypeSpec [ label="{ast.TypeSpec|Doc *CommentGroup\lName *Ident\lType Expr\lComment *CommentGroup\l|Pos() token.Pos\lEnd() token.Pos\lspecNode()\l}", shape=record ];
	ast_SEL_TypeSwitchStmt [ label="{ast.TypeSwitchStmt|Switch token.Pos\lInit Stmt\lAssign Stmt\lBody *BlockStmt\l|Pos() token.Pos\lEnd() token.Pos\lstmtNode()\l}", shape=record ];
	ast_SEL_UnaryExpr [ label="{ast.UnaryExpr|OpPos token.Pos\lOp token.Token\lX Expr\l|Pos() token.Pos\lEnd() token.Pos\lexprNode()\l}", shape=record ];
	ast_SEL_ValueSpec [ label="{ast.ValueSpec|Doc *CommentGroup\lNames []*Ident\lType Expr\lValues []Expr\lComment *CommentGroup\l|Pos() token.Pos\lEnd() token.Pos\lspecNode()\l}", shape=record ];
	ast_SEL_Visitor [ label="{ast.Visitor||Visit(ast.Node) ast.Visitor\l}", shape=Mrecord ];
	ast_SEL_byCommentPos [ label="{ast.byCommentPos|[]*CommentGroup|Len() int\lSwap(int, int)\lLess(int, int) bool\l}", shape=record ];
	ast_SEL_byImportSpec [ label="{ast.byImportSpec|[]Spec|Len() int\lSwap(int, int)\lLess(int, int) bool\l}", shape=record ];
	ast_SEL_byInterval [ label="{ast.byInterval|[]Node|Len() int\lLess(int, int) bool\lSwap(int, int)\l}", shape=record ];
	ast_SEL_byPos [ label="{ast.byPos|[]*CommentGroup|Len() int\lLess(int, int) bool\lSwap(int, int)\l}", shape=record ];
	ast_SEL_commentListReader [ label="{ast.commentListReader|fset *token.FileSet\llist []*CommentGroup\lindex int\lcomment *CommentGroup\lpos token.Position\lend token.Position\l|eol() bool\lnext()\l}", shape=record ];
	ast_SEL_inspector [ label="{ast.inspector|func(Node) bool|Visit(ast.Node) ast.Visitor\l}", shape=record ];
	ast_SEL_nodeStack [ label="{ast.nodeStack|[]Node|push(ast.Node)\lpop(token.Pos) ast.Node\l}", shape=record ];
	ast_SEL_pkgBuilder [ label="{ast.pkgBuilder|fset *token.FileSet\lerrors scanner.ErrorList\l|error(token.Pos, string)\lerrorf(token.Pos, string, ...interface\{\})\ldeclare(*ast.Scope, *ast.Scope, *ast.Object)\l}", shape=record ];
	ast_SEL_posSpan [ label="{ast.posSpan|Start token.Pos\lEnd token.Pos\l|}", shape=record ];
	ast_SEL_printer [ label="{ast.printer|output io.Writer\lfset *token.FileSet\lfilter FieldFilter\lptrmap map[interface\{\}]int\lindent int\llast byte\lline int\l|Write([]byte) (int, error)\lprintf(string, ...interface\{\})\lprint(reflect.Value)\l}", shape=record ];
	bytes_SEL_Buffer [ label="{bytes.Buffer|buf []byte\loff int\lruneBytes [utf8.UTFMax]byte\lbootstrap [64]byte\llastRead readOp\l|Bytes() []byte\lString() string\lLen() int\lCap() int\lTruncate(int)\lReset()\lgrow(int) int\lGrow(int)\lWrite([]byte) (int, error)\lWriteString(string) (int, error)\lReadFrom(io.Reader) (int64, error)\lWriteTo(io.Writer) (int64, error)\lWriteByte(byte) error\lWriteRune(rune) (int, error)\lRead([]byte) (int, error)\lNext(int) []byte\lReadByte() (byte, error)\lReadRune() (rune, int, error)\lUnreadRune() error\lUnreadByte() error\lReadBytes(byte) ([]byte, error)\lreadSlice(byte) ([]byte, error)\lReadString(byte) (string, error)\l}", shape=record ];
	bytes_SEL_Reader [ label="{bytes.Reader|s []byte\li int64\lprevRune int\l|Len() int\lSize() int64\lRead([]byte) (int, error)\lReadAt([]byte, int64) (int, error)\lReadByte() (byte, error)\lUnreadByte() error\lReadRune() (rune, int, error)\lUnreadRune() error\lSeek(int64, int) (int64, error)\lWriteTo(io.Writer) (int64, error)\l}", shape=record ];
	bytes_SEL_readOp [ label="{bytes.readOp|int|}", shape=record ];
	fmt_SEL_ScanState [ label="{fmt.ScanState||ReadRune() (rune, int, error)\lUnreadRune() error\lSkipSpace()\lToken(bool, func(rune) bool) ([]byte, error)\lWidth() (int, bool)\lRead([]byte) (int, error)\l}", shape=Mrecord ];
	fmt_SEL_State [ label="{fmt.State||Write([]byte) (int, error)\lWidth() (int, bool)\lPrecision() (int, bool)\lFlag(int) bool\l}", shape=Mrecord ];
	fmt_SEL_Stringer [ label="{fmt.Stringer|*HIGHLY IMPLMENTED*\n|String() string\l}", shape=Mrecord ];
	fmt_SEL_buffer [ label="{fmt.buffer|[]byte|Write([]byte) (int, error)\lWriteString(string) (int, error)\lWriteByte(byte) error\lWriteRune(rune) error\l}", shape=record ];
	fmt_SEL_fmt [ label="{fmt.fmt|fmtFlags\lintbuf [nByte]byte\lbuf *buffer\lwid int\lprec int\l|clearflags()\linit(*fmt.buffer)\lcomputePadding(int) ([]byte, int, int)\lwritePadding(int, []byte)\lpad([]byte)\lpadString(string)\lfmt_boolean(bool)\linteger(int64, uint64, bool, string)\ltruncate(string) string\lfmt_s(string)\lfmt_sbx(string, []byte, string)\lfmt_sx(string, string)\lfmt_bx([]byte, string)\lfmt_q(string)\lfmt_qc(int64)\lformatFloat(float64, byte, int, int)\lfmt_e64(float64)\lfmt_E64(float64)\lfmt_f64(float64)\lfmt_g64(float64)\lfmt_G64(float64)\lfmt_fb64(float64)\lfmt_e32(float32)\lfmt_E32(float32)\lfmt_f32(float32)\lfmt_g32(float32)\lfmt_G32(float32)\lfmt_fb32(float32)\lfmt_c64(complex64, rune)\lfmt_c128(complex128, rune)\lfmt_complex(float64, float64, int, rune)\l}", shape=record ];
	fmt_SEL_fmtFlags [ label="{fmt.fmtFlags|widPresent bool\lprecPresent bool\lminus bool\lplus bool\lsharp bool\lspace bool\lunicode bool\luniQuote bool\lzero bool\lplusV bool\lsharpV bool\l|}", shape=record ];
	fmt_SEL_pp [ label="{fmt.pp|n int\lpanicking bool\lerroring bool\lbuf buffer\larg interface\{\}\lvalue reflect.Value\lreordered bool\lgoodArgNum bool\lruneBuf [utf8.UTFMax]byte\lfmt fmt\l|free()\lWidth() (int, bool)\lPrecision() (int, bool)\lFlag(int) bool\ladd(rune)\lWrite([]byte) (int, error)\lunknownType(reflect.Value)\lbadVerb(rune)\lfmtBool(bool, rune)\lfmtC(int64)\lfmtInt64(int64, rune)\lfmt0x64(uint64, bool)\lfmtUnicode(int64)\lfmtUint64(uint64, rune)\lfmtFloat32(float32, rune)\lfmtFloat64(float64, rune)\lfmtComplex64(complex64, rune)\lfmtComplex128(complex128, rune)\lfmtString(string, rune)\lfmtBytes([]byte, rune, reflect.Type, int)\lfmtPointer(reflect.Value, rune)\lcatchPanic(interface\{\}, rune)\lclearSpecialFlags() (bool, bool)\lrestoreSpecialFlags(bool, bool)\lhandleMethods(rune, int) bool\lprintArg(interface\{\}, rune, int) bool\lprintValue(reflect.Value, rune, int) bool\lprintReflectValue(reflect.Value, rune, int) bool\largNumber(int, string, int, int) (int, int, bool)\ldoPrintf(string, []interface\{\})\ldoPrint([]interface\{\}, bool, bool)\l}", shape=record ];
	fmt_SEL_readRune [ label="{fmt.readRune|reader io.Reader\lbuf [utf8.UTFMax]byte\lpending int\lpendBuf [utf8.UTFMax]byte\l|readByte() (byte, error)\lunread([]byte)\lReadRune() (rune, int, error)\l}", shape=record ];
	fmt_SEL_runeUnreader [ label="{fmt.runeUnreader||UnreadRune() error\l}", shape=Mrecord ];
	fmt_SEL_ss [ label="{fmt.ss|ssave\lrr io.RuneReader\lbuf buffer\lpeekRune rune\lprevRune rune\lcount int\latEOF bool\l|Read([]byte) (int, error)\lReadRune() (rune, int, error)\lWidth() (int, bool)\lgetRune() rune\lmustReadRune() rune\lUnreadRune() error\lerror(error)\lerrorString(string)\lToken(bool, func(rune) bool) ([]byte, error)\lSkipSpace()\lfree(fmt.ssave)\lskipSpace(bool)\ltoken(bool, func(rune) bool) []byte\lconsume(string, bool) bool\lpeek(string) bool\lnotEOF()\laccept(string) bool\lokVerb(rune, string, string) bool\lscanBool(rune) bool\lgetBase(rune) (int, string)\lscanNumber(string, bool) string\lscanRune(int) int64\lscanBasePrefix() (int, string, bool)\lscanInt(rune, int) int64\lscanUint(rune, int) uint64\lfloatToken() string\lcomplexTokens() (string, string)\lconvertFloat(string, int) float64\lscanComplex(rune, int) complex128\lconvertString(rune) string\lquotedString() string\lhexByte() (byte, bool)\lhexString() string\lscanOne(rune, interface\{\})\ldoScan([]interface\{\}) (int, error)\ladvance(string) int\ldoScanf(string, []interface\{\}) (int, error)\l}", shape=record ];
	fmt_SEL_ssave [ label="{fmt.ssave|validSave bool\lnlIsEnd bool\lnlIsSpace bool\largLimit int\llimit int\lmaxWid int\l|}", shape=record ];
	io_SEL_ByteReader [ label="{io.ByteReader||ReadByte() (byte, error)\l}", shape=Mrecord ];
	io_SEL_ByteScanner [ label="{io.ByteScanner|ByteReader\n|UnreadByte() error\l}", shape=Mrecord ];
	io_SEL_ByteWriter [ label="{io.ByteWriter||WriteByte(byte) error\l}", shape=Mrecord ];
	io_SEL_Closer [ label="{io.Closer||Close() error\l}", shape=Mrecord ];
	io_SEL_LimitedReader [ label="{io.LimitedReader|R Reader\lN int64\l|Read([]byte) (int, error)\l}", shape=record ];
	io_SEL_PipeReader [ label="{io.PipeReader|p *pipe\l|Read([]byte) (int, error)\lClose() error\lCloseWithError(error) error\l}", shape=record ];
	io_SEL_PipeWriter [ label="{io.PipeWriter|p *pipe\l|Write([]byte) (int, error)\lClose() error\lCloseWithError(error) error\l}", shape=record ];
	io_SEL_ReadCloser [ label="{io.ReadCloser|Reader\nCloser\n|}", shape=Mrecord ];
	io_SEL_ReadSeeker [ label="{io.ReadSeeker|Reader\nSeeker\n|}", shape=Mrecord ];
	io_SEL_ReadWriteCloser [ label="{io.ReadWriteCloser|Reader\nWriter\nCloser\n|}", shape=Mrecord ];
	io_SEL_ReadWriteSeeker [ label="{io.ReadWriteSeeker|Reader\nWriter\nSeeker\n|}", shape=Mrecord ];
	io_SEL_ReadWriter [ label="{io.ReadWriter|Reader\nWriter\n|}", shape=Mrecord ];
	io_SEL_Reader [ label="{io.Reader|*HIGHLY IMPLMENTED*\n|Read([]byte) (int, error)\l}", shape=Mrecord ];
	io_SEL_ReaderAt [ label="{io.ReaderAt||ReadAt([]byte, int64) (int, error)\l}", shape=Mrecord ];
	io_SEL_ReaderFrom [ label="{io.ReaderFrom||ReadFrom(io.Reader) (int64, error)\l}", shape=Mrecord ];
	io_SEL_RuneReader [ label="{io.RuneReader||ReadRune() (rune, int, error)\l}", shape=Mrecord ];
	io_SEL_RuneScanner [ label="{io.RuneScanner|RuneReader\n|UnreadRune() error\l}", shape=Mrecord ];
	io_SEL_SectionReader [ label="{io.SectionReader|r ReaderAt\lbase int64\loff int64\llimit int64\l|Read([]byte) (int, error)\lSeek(int64, int) (int64, error)\lReadAt([]byte, int64) (int, error)\lSize() int64\l}", shape=record ];
	io_SEL_Seeker [ label="{io.Seeker||Seek(int64, int) (int64, error)\l}", shape=Mrecord ];
	io_SEL_WriteCloser [ label="{io.WriteCloser|Writer\nCloser\n|}", shape=Mrecord ];
	io_SEL_WriteSeeker [ label="{io.WriteSeeker|Writer\nSeeker\n|}", shape=Mrecord ];
	io_SEL_Writer [ label="{io.Writer||Write([]byte) (int, error)\l}", shape=Mrecord ];
	io_SEL_WriterAt [ label="{io.WriterAt||WriteAt([]byte, int64) (int, error)\l}", shape=Mrecord ];
	io_SEL_WriterTo [ label="{io.WriterTo||WriteTo(io.Writer) (int64, error)\l}", shape=Mrecord ];
	io_SEL_multiReader [ label="{io.multiReader|readers []Reader\l|Read([]byte) (int, error)\l}", shape=record ];
	io_SEL_multiWriter [ label="{io.multiWriter|writers []Writer\l|Write([]byte) (int, error)\l}", shape=record ];
	io_SEL_pipe [ label="{io.pipe|rl sync.Mutex\lwl sync.Mutex\ll sync.Mutex\ldata []byte\lrwait sync.Cond\lwwait sync.Cond\lrerr error\lwerr error\l|read([]byte) (int, error)\lwrite([]byte) (int, error)\lrclose(error)\lwclose(error)\l}", shape=record ];
	io_SEL_stringWriter [ label="{io.stringWriter||WriteString(string) (int, error)\l}", shape=Mrecord ];
	io_SEL_teeReader [ label="{io.teeReader|r Reader\lw Writer\l|Read([]byte) (int, error)\l}", shape=record ];
	os_SEL_File [ label="{os.File|file\l|Fd() uintptr\lClose() error\lStat() (os.FileInfo, error)\lreaddir(int) ([]os.FileInfo, error)\lread([]byte) (int, error)\lpread([]byte, int64) (int, error)\lwrite([]byte) (int, error)\lpwrite([]byte, int64) (int, error)\lseek(int64, int) (int64, error)\lreaddir(int) ([]os.FileInfo, error)\lreaddirnames(int) ([]string, error)\lFd() uintptr\lClose() error\lreaddir(int) ([]os.FileInfo, error)\lreadConsole([]byte) (int, error)\lread([]byte) (int, error)\lpread([]byte, int64) (int, error)\lwriteConsole([]byte) (int, error)\lwrite([]byte) (int, error)\lpwrite([]byte, int64) (int, error)\lseek(int64, int) (int64, error)\lStat() (os.FileInfo, error)\lreaddirnames(int) ([]string, error)\lName() string\lRead([]byte) (int, error)\lReadAt([]byte, int64) (int, error)\lWrite([]byte) (int, error)\lWriteAt([]byte, int64) (int, error)\lSeek(int64, int) (int64, error)\lWriteString(string) (int, error)\lChdir() error\lFd() uintptr\lClose() error\lStat() (os.FileInfo, error)\lTruncate(int64) error\lChmod(os.FileMode) error\lSync() error\lread([]byte) (int, error)\lpread([]byte, int64) (int, error)\lwrite([]byte) (int, error)\lpwrite([]byte, int64) (int, error)\lseek(int64, int) (int64, error)\lChown(int, int) error\l}", shape=record ];
	os_SEL_FileInfo [ label="{os.FileInfo||Name() string\lSize() int64\lMode() os.FileMode\lModTime() time.Time\lIsDir() bool\lSys() interface\{\}\l}", shape=Mrecord ];
	os_SEL_FileMode [ label="{os.FileMode|uint32|String() string\lIsDir() bool\lIsRegular() bool\lPerm() os.FileMode\l}", shape=record ];
	os_SEL_ProcAttr [ label="{os.ProcAttr|Dir string\lEnv []string\lFiles []*File\lSys *syscall.SysProcAttr\l|}", shape=record ];
	os_SEL_dirInfo [ label="{os.dirInfo|buf []byte\lnbuf int\lbufp int\l|}", shape=record ];
	os_SEL_file [ label="{os.file|fd int\lname string\ldirinfo *dirInfo\lnepipe int32\l|close() error\lisdir() bool\lclose() error\lclose() error\l}", shape=record ];
	os_SEL_fileStat [ label="{os.fileStat|name string\lsize int64\lmode FileMode\lmodTime time.Time\lsys interface\{\}\l|Size() int64\lMode() os.FileMode\lModTime() time.Time\lSys() interface\{\}\lName() string\lIsDir() bool\lSize() int64\lMode() os.FileMode\lModTime() time.Time\lSys() interface\{\}\lloadFileId() error\l}", shape=record ];
	reader [ label="{reader|bufio.Reader\lfd *os.File\lresp *http.Response\l|close()\l}", shape=record ];
	reflect_SEL_Kind [ label="{reflect.Kind|uint|String() string\l}", shape=record ];
	reflect_SEL_Method [ label="{reflect.Method|Name string\lPkgPath string\lType Type\lFunc Value\lIndex int\l|}", shape=record ];
	reflect_SEL_SelectCase [ label="{reflect.SelectCase|Dir SelectDir\lChan Value\lSend Value\l|}", shape=record ];
	reflect_SEL_SelectDir [ label="{reflect.SelectDir|int|}", shape=record ];
	reflect_SEL_StructField [ label="{reflect.StructField|Name string\lPkgPath string\lType Type\lTag StructTag\lOffset uintptr\lIndex []int\lAnonymous bool\l|}", shape=record ];
	reflect_SEL_StructTag [ label="{reflect.StructTag|string|Get(string) string\l}", shape=record ];
	reflect_SEL_Type [ label="{reflect.Type||Align() int\lFieldAlign() int\lMethod(int) reflect.Method\lMethodByName(string) (reflect.Method, bool)\lNumMethod() int\lName() string\lPkgPath() string\lSize() uintptr\lString() string\lKind() reflect.Kind\lImplements(reflect.Type) bool\lAssignableTo(reflect.Type) bool\lConvertibleTo(reflect.Type) bool\lComparable() bool\lBits() int\lChanDir() reflect.ChanDir\lIsVariadic() bool\lElem() reflect.Type\lField(int) reflect.StructField\lFieldByIndex([]int) reflect.StructField\lFieldByName(string) (reflect.StructField, bool)\lFieldByNameFunc(func(string) bool) (reflect.StructField, bool)\lIn(int) reflect.Type\lKey() reflect.Type\lLen() int\lNumField() int\lNumIn() int\lNumOut() int\lOut(int) reflect.Type\lcommon() *reflect.rtype\luncommon() *reflect.uncommonType\l}", shape=Mrecord ];
	reflect_SEL_Value [ label="{reflect.Value|flag\ltyp *rtype\lptr unsafe.Pointer\l|pointer() unsafe.Pointer\lAddr() reflect.Value\lBool() bool\lBytes() []byte\lrunes() []rune\lCanAddr() bool\lCanSet() bool\lCall([]reflect.Value) []reflect.Value\lCallSlice([]reflect.Value) []reflect.Value\lcall(string, []reflect.Value) []reflect.Value\lCap() int\lClose()\lComplex() complex128\lElem() reflect.Value\lField(int) reflect.Value\lFieldByIndex([]int) reflect.Value\lFieldByName(string) reflect.Value\lFieldByNameFunc(func(string) bool) reflect.Value\lFloat() float64\lIndex(int) reflect.Value\lInt() int64\lCanInterface() bool\lInterface() interface\{\}\lInterfaceData() [2]uintptr\lIsNil() bool\lIsValid() bool\lKind() reflect.Kind\lLen() int\lMapIndex(reflect.Value) reflect.Value\lMapKeys() []reflect.Value\lMethod(int) reflect.Value\lNumMethod() int\lMethodByName(string) reflect.Value\lNumField() int\lOverflowComplex(complex128) bool\lOverflowFloat(float64) bool\lOverflowInt(int64) bool\lOverflowUint(uint64) bool\lPointer() uintptr\lRecv() (reflect.Value, bool)\lrecv(bool) (reflect.Value, bool)\lSend(reflect.Value)\lsend(reflect.Value, bool) bool\lSet(reflect.Value)\lSetBool(bool)\lSetBytes([]byte)\lsetRunes([]rune)\lSetComplex(complex128)\lSetFloat(float64)\lSetInt(int64)\lSetLen(int)\lSetCap(int)\lSetMapIndex(reflect.Value, reflect.Value)\lSetUint(uint64)\lSetPointer(unsafe.Pointer)\lSetString(string)\lSlice(int, int) reflect.Value\lSlice3(int, int, int) reflect.Value\lString() string\lTryRecv() (reflect.Value, bool)\lTrySend(reflect.Value) bool\lType() reflect.Type\lUint() uint64\lUnsafeAddr() uintptr\lassignTo(string, *reflect.rtype, unsafe.Pointer) reflect.Value\lConvert(reflect.Type) reflect.Value\l}", shape=record ];
	reflect_SEL_ValueError [ label="{reflect.ValueError|Method string\lKind Kind\l|Error() string\l}", shape=record ];
	reflect_SEL_arrayType [ label="{reflect.arrayType|rtype\lelem *rtype\lslice *rtype\llen uintptr\l|}", shape=record ];
	reflect_SEL_bitVector [ label="{reflect.bitVector|n uint32\ldata []byte\l|append(uint8)\l}", shape=record ];
	reflect_SEL_cacheKey [ label="{reflect.cacheKey|kind Kind\lt1 *rtype\lt2 *rtype\lextra uintptr\l|}", shape=record ];
	reflect_SEL_chanType [ label="{reflect.chanType|rtype\lelem *rtype\ldir uintptr\l|}", shape=record ];
	reflect_SEL_emptyInterface [ label="{reflect.emptyInterface|typ *rtype\lword unsafe.Pointer\l|}", shape=record ];
	reflect_SEL_fieldScan [ label="{reflect.fieldScan|typ *structType\lindex []int\l|}", shape=record ];
	reflect_SEL_flag [ label="{reflect.flag|uintptr|kind() reflect.Kind\lmustBe(reflect.Kind)\lmustBeExported()\lmustBeAssignable()\l}", shape=record ];
	reflect_SEL_funcType [ label="{reflect.funcType|rtype\ldotdotdot bool\lin []*rtype\lout []*rtype\l|}", shape=record ];
	reflect_SEL_imethod [ label="{reflect.imethod|name *string\lpkgPath *string\ltyp *rtype\l|}", shape=record ];
	reflect_SEL_interfaceType [ label="{reflect.interfaceType|rtype\lmethods []imethod\l|Method(int) reflect.Method\lNumMethod() int\lMethodByName(string) (reflect.Method, bool)\l}", shape=record ];
	reflect_SEL_layoutKey [ label="{reflect.layoutKey|t *rtype\lrcvr *rtype\l|}", shape=record ];
	reflect_SEL_layoutType [ label="{reflect.layoutType|t *rtype\largSize uintptr\lretOffset uintptr\lstack *bitVector\lframePool *sync.Pool\l|}", shape=record ];
	reflect_SEL_makeFuncImpl [ label="{reflect.makeFuncImpl|code uintptr\lstack *bitVector\ltyp *funcType\lfn func([]Value) []Value\l|}", shape=record ];
	reflect_SEL_mapType [ label="{reflect.mapType|rtype\lkey *rtype\lelem *rtype\lbucket *rtype\lhmap *rtype\lkeysize uint8\lindirectkey uint8\lvaluesize uint8\lindirectvalue uint8\lbucketsize uint16\lreflexivekey bool\l|}", shape=record ];
	reflect_SEL_method [ label="{reflect.method|name *string\lpkgPath *string\lmtyp *rtype\ltyp *rtype\lifn unsafe.Pointer\ltfn unsafe.Pointer\l|}", shape=record ];
	reflect_SEL_methodValue [ label="{reflect.methodValue|fn uintptr\lstack *bitVector\lmethod int\lrcvr Value\l|}", shape=record ];
	reflect_SEL_ptrType [ label="{reflect.ptrType|rtype\lelem *rtype\l|}", shape=record ];
	reflect_SEL_rtype [ label="{reflect.rtype|uncommonType\lsize uintptr\lptrdata uintptr\lhash uint32\l_ uint8\lalign uint8\lfieldAlign uint8\lkind uint8\lalg *typeAlg\lgcdata *byte\lstring *string\lptrToThis *rtype\lzero unsafe.Pointer\l|String() string\lSize() uintptr\lBits() int\lAlign() int\lFieldAlign() int\lKind() reflect.Kind\lpointers() bool\lcommon() *reflect.rtype\lNumMethod() int\lMethod(int) reflect.Method\lMethodByName(string) (reflect.Method, bool)\lPkgPath() string\lName() string\lChanDir() reflect.ChanDir\lIsVariadic() bool\lElem() reflect.Type\lField(int) reflect.StructField\lFieldByIndex([]int) reflect.StructField\lFieldByName(string) (reflect.StructField, bool)\lFieldByNameFunc(func(string) bool) (reflect.StructField, bool)\lIn(int) reflect.Type\lKey() reflect.Type\lLen() int\lNumField() int\lNumIn() int\lNumOut() int\lOut(int) reflect.Type\lptrTo() *reflect.rtype\lImplements(reflect.Type) bool\lAssignableTo(reflect.Type) bool\lConvertibleTo(reflect.Type) bool\lComparable() bool\l}", shape=record ];
	reflect_SEL_runtimeSelect [ label="{reflect.runtimeSelect|dir uintptr\ltyp *rtype\lch unsafe.Pointer\lval unsafe.Pointer\l|}", shape=record ];
	reflect_SEL_sliceType [ label="{reflect.sliceType|rtype\lelem *rtype\l|}", shape=record ];
	reflect_SEL_structField [ label="{reflect.structField|name *string\lpkgPath *string\ltyp *rtype\ltag *string\loffset uintptr\l|}", shape=record ];
	reflect_SEL_structType [ label="{reflect.structType|rtype\lfields []structField\l|Field(int) reflect.StructField\lFieldByIndex([]int) reflect.StructField\lFieldByNameFunc(func(string) bool) (reflect.StructField, bool)\lFieldByName(string) (reflect.StructField, bool)\l}", shape=record ];
	reflect_SEL_typeAlg [ label="{reflect.typeAlg|hash func(unsafe.Pointer, uintptr) uintptr\lequal func(unsafe.Pointer, unsafe.Pointer) bool\l|}", shape=record ];
	reflect_SEL_uncommonType [ label="{reflect.uncommonType|name *string\lpkgPath *string\lmethods []method\l|uncommon() *reflect.uncommonType\lPkgPath() string\lName() string\lMethod(int) reflect.Method\lNumMethod() int\lMethodByName(string) (reflect.Method, bool)\l}", shape=record ];
	reflect_SEL_visit [ label="{reflect.visit|a1 uintptr\la2 uintptr\ltyp Type\l|}", shape=record ];
	scanner_SEL_Error [ label="{scanner.Error|Pos token.Position\lMsg string\l|Error() string\l}", shape=record ];
	scanner_SEL_ErrorHandler [ label="{scanner.ErrorHandler|func(pos token.Position, msg string) |}", shape=record ];
	scanner_SEL_ErrorList [ label="{scanner.ErrorList|[]*Error|Add(token.Position, string)\lReset()\lLen() int\lSwap(int, int)\lLess(int, int) bool\lSort()\lRemoveMultiples()\lError() string\lErr() error\l}", shape=record ];
	scanner_SEL_Mode [ label="{scanner.Mode|uint|}", shape=record ];
	scanner_SEL_Scanner [ label="{scanner.Scanner|file *token.File\ldir string\lsrc []byte\lerr ErrorHandler\lmode Mode\lch rune\loffset int\lrdOffset int\llineOffset int\linsertSemi bool\lErrorCount int\l|next()\lInit(*token.File, []byte, scanner.ErrorHandler, scanner.Mode)\lerror(int, string)\linterpretLineComment([]byte)\lscanComment() string\lfindLineEnd() bool\lscanIdentifier() string\lscanMantissa(int)\lscanNumber(bool) (token.Token, string)\lscanEscape(rune) bool\lscanRune() string\lscanString() string\lscanRawString() string\lskipWhitespace()\lswitch2(token.Token, token.Token) token.Token\lswitch3(token.Token, token.Token, rune, token.Token) token.Token\lswitch4(token.Token, token.Token, rune, token.Token, token.Token) token.Token\lScan() (token.Pos, token.Token, string)\l}", shape=record ];
	sort_SEL_Interface [ label="{sort.Interface|*HIGHLY IMPLMENTED*\n|Len() int\lLess(int, int) bool\lSwap(int, int)\l}", shape=Mrecord ];
	sort_SEL_reverse [ label="{sort.reverse|Interface\l|Less(int, int) bool\l}", shape=record ];
	strings_SEL_Reader [ label="{strings.Reader|s string\li int64\lprevRune int\l|Len() int\lSize() int64\lRead([]byte) (int, error)\lReadAt([]byte, int64) (int, error)\lReadByte() (byte, error)\lUnreadByte() error\lReadRune() (rune, int, error)\lUnreadRune() error\lSeek(int64, int) (int64, error)\lWriteTo(io.Writer) (int64, error)\l}", shape=record ];
	strings_SEL_Replacer [ label="{strings.Replacer|r replacer\l|Replace(string) string\lWriteString(io.Writer, string) (int, error)\l}", shape=record ];
	strings_SEL_appendSliceWriter [ label="{strings.appendSliceWriter|[]byte|Write([]byte) (int, error)\lWriteString(string) (int, error)\l}", shape=record ];
	strings_SEL_byteReplacer [ label="{strings.byteReplacer|[256]byte|Replace(string) string\lWriteString(io.Writer, string) (int, error)\l}", shape=record ];
	strings_SEL_byteStringReplacer [ label="{strings.byteStringReplacer|[256][]byte|Replace(string) string\lWriteString(io.Writer, string) (int, error)\l}", shape=record ];
	strings_SEL_genericReplacer [ label="{strings.genericReplacer|root trieNode\ltableSize int\lmapping [256]byte\l|lookup(string, bool) (string, int, bool)\lReplace(string) string\lWriteString(io.Writer, string) (int, error)\l}", shape=record ];
	strings_SEL_replacer [ label="{strings.replacer||Replace(string) string\lWriteString(io.Writer, string) (int, error)\l}", shape=Mrecord ];
	strings_SEL_singleStringReplacer [ label="{strings.singleStringReplacer|finder *stringFinder\lvalue string\l|Replace(string) string\lWriteString(io.Writer, string) (int, error)\l}", shape=record ];
	strings_SEL_stringFinder [ label="{strings.stringFinder|pattern string\lbadCharSkip [256]int\lgoodSuffixSkip []int\l|next(string) int\l}", shape=record ];
	strings_SEL_stringWriter [ label="{strings.stringWriter|w io.Writer\l|WriteString(string) (int, error)\l}", shape=record ];
	strings_SEL_stringWriterIface [ label="{strings.stringWriterIface||WriteString(string) (int, error)\l}", shape=Mrecord ];
	strings_SEL_trieNode [ label="{strings.trieNode|value string\lpriority int\lprefix string\lnext *trieNode\ltable []*trieNode\l|add(string, string, int, *strings.genericReplacer)\l}", shape=record ];
	token_SEL_File [ label="{token.File|set *FileSet\lname string\lbase int\lsize int\llines []int\linfos []lineInfo\l|Name() string\lBase() int\lSize() int\lLineCount() int\lAddLine(int)\lMergeLine(int)\lSetLines([]int) bool\lSetLinesForContent([]byte)\lAddLineInfo(int, string, int)\lPos(int) token.Pos\lOffset(token.Pos) int\lLine(token.Pos) int\lunpack(int, bool) (string, int, int)\lposition(token.Pos, bool) token.Position\lPositionFor(token.Pos, bool) token.Position\lPosition(token.Pos) token.Position\l}", shape=record ];
	token_SEL_FileSet [ label="{token.FileSet|mutex sync.RWMutex\lbase int\lfiles []*File\llast *File\l|Base() int\lAddFile(string, int, int) *token.File\lIterate(func(*File) bool)\lfile(token.Pos) *token.File\lFile(token.Pos) *token.File\lPositionFor(token.Pos, bool) token.Position\lPosition(token.Pos) token.Position\lRead(func(interface\{\}) error) error\lWrite(func(interface\{\}) error) error\l}", shape=record ];
	token_SEL_Pos [ label="{token.Pos|int|IsValid() bool\l}", shape=record ];
	token_SEL_Position [ label="{token.Position|Filename string\lOffset int\lLine int\lColumn int\l|IsValid() bool\lString() string\l}", shape=record ];
	token_SEL_Token [ label="{token.Token|int|String() string\lPrecedence() int\lIsLiteral() bool\lIsOperator() bool\lIsKeyword() bool\l}", shape=record ];
	token_SEL_lineInfo [ label="{token.lineInfo|Offset int\lFilename string\lLine int\l|}", shape=record ];
	token_SEL_serializedFile [ label="{token.serializedFile|Name string\lBase int\lSize int\lLines []int\lInfos []lineInfo\l|}", shape=record ];
	token_SEL_serializedFileSet [ label="{token.serializedFileSet|Base int\lFiles []serializedFile\l|}", shape=record ];
	unicode_SEL_CaseRange [ label="{unicode.CaseRange|Lo uint32\lHi uint32\lDelta d\l|}", shape=record ];
	unicode_SEL_Range16 [ label="{unicode.Range16|Lo uint16\lHi uint16\lStride uint16\l|}", shape=record ];
	unicode_SEL_Range32 [ label="{unicode.Range32|Lo uint32\lHi uint32\lStride uint32\l|}", shape=record ];
	unicode_SEL_RangeTable [ label="{unicode.RangeTable|R16 []Range16\lR32 []Range32\lLatinOffset int\l|}", shape=record ];
	unicode_SEL_SpecialCase [ label="{unicode.SpecialCase|[]CaseRange|ToUpper(rune) rune\lToTitle(rune) rune\lToLower(rune) rune\l}", shape=record ];
	unicode_SEL_d [ label="{unicode.d|[MaxCase]rune|}", shape=record ];

}

