digraph goActorBinaryTree {
	operation->BinaryTreeSet[ label=field, style=dashed ];
	operationReply->BinaryTreeSet[ label=field, style=dashed ];
	binaryTreeNode->BinaryTreeSet[ label=field, style=dashed ];
	operation->testProbe[ label=field, style=dashed ];
	operationReply->testProbe[ label=field, style=dashed ];
	BinaryTreeSet->testProbe[ label=field, style=dashed ];
	replyTracker->testProbe[ label=field, style=dashed ];
	operationReply->binaryTreeNode[ label=field, style=dashed ];
	operation->binaryTreeNode[ label=field, style=dashed ];
	binaryTreeNode->binaryTreeNode[ label=field, style=dashed ];
	replyTracker->binaryTreeNode[ label=field, style=dashed ];
	operationFinished->binaryTreeNode[ label=field, style=dashed ];
	operationReply->copyInsert[ label=field, style=dashed ];
	operationReply->getElems[ label=field, style=dashed ];
	operationReply->contains[ label=field, style=dashed ];
	operationReply->insert[ label=field, style=dashed ];
	operationReply->remove[ label=field, style=dashed ];
	containsResult->operationReply[ label=implements, style=bold ];
	operationFinished->operationReply[ label=implements, style=bold ];
	copyInsert->operationReply[ label=implements, style=bold ];
	gc->operationReply[ label=implements, style=bold ];
	getElems->operationReply[ label=implements, style=bold ];
	contains->operationReply[ label=implements, style=bold ];
	insert->operationReply[ label=implements, style=bold ];
	remove->operationReply[ label=implements, style=bold ];
	copyInsert->operation[ label=implements, style=bold ];
	gc->operation[ label=implements, style=bold ];
	getElems->operation[ label=implements, style=bold ];
	contains->operation[ label=implements, style=bold ];
	insert->operation[ label=implements, style=bold ];
	remove->operation[ label=implements, style=bold ];
	BinaryTreeSet [ label="{BinaryTreeSet|opChan chan operation\lchildReply chan operationReply\lroot *binaryTreeNode\ltransferRoot *binaryTreeNode\lcurrentID int\ldone chan bool\l|rootChan() chan operation\ltransferRootChan() chan operation\lClose() \lrun() \lrungc() \l}", shape=record ];
	binaryTreeNode [ label="{binaryTreeNode|parent chan operationReply\lopChan chan operation\lchildReply chan operationReply\lleft *binaryTreeNode\lright *binaryTreeNode\lelem int\lremoved bool\lgcoperationResponses replyTracker\lgetElemResponse operationFinished\l|String() string\lleftChan() chan operation\lrightChan() chan operation\lRun() \l}", shape=record ];
	contains [ label="{contains|id int\lelem int\lrequesterChan chan operationReply\l|ID() int\lElem() int\lRequesterChan() chan operationReply\lPerform(*binaryTreeNode) \lString() string\l}", shape=record ];
	containsResult [ label="{containsResult|id int\lresult bool\l|ID() int\lResult() bool\lString() string\l}", shape=record ];
	copyInsert [ label="{copyInsert|id int\lelem int\lrequesterChan chan operationReply\l|ID() int\lElem() int\lRequesterChan() chan operationReply\lPerform(*binaryTreeNode) \lString() string\l}", shape=record ];
	gc [ label="{gc||ID() int\lElem() int\lRequesterChan() chan operationReply\lPerform(*binaryTreeNode) \lString() string\l}", shape=record ];
	getElems [ label="{getElems|id int\lrequesterChan chan operationReply\l|ID() int\lElem() int\lRequesterChan() chan operationReply\lPerform(*binaryTreeNode) \lString() string\l}", shape=record ];
	insert [ label="{insert|id int\lelem int\lrequesterChan chan operationReply\l|ID() int\lElem() int\lRequesterChan() chan operationReply\lPerform(*binaryTreeNode) \lString() string\l}", shape=record ];
	operation [ label="{operation||ID() int\lElem() int\lRequesterChan() chan operationReply\lPerform(*binaryTreeNode) \l}", shape=Mrecord ];
	operationFinished [ label="{operationFinished|id int\l|ID() int\lString() string\l}", shape=record ];
	operationReply [ label="{operationReply||ID() int\l}", shape=Mrecord ];
	remove [ label="{remove|id int\lelem int\lrequesterChan chan operationReply\l|ID() int\lElem() int\lRequesterChan() chan operationReply\lPerform(*binaryTreeNode) \lString() string\l}", shape=record ];
	replyTracker [ label="{replyTracker|m map[int]bool\lkey *sync.Mutex\l|sentOp(operation) \lreceivedReply(operationReply) error\lget(int) bool\lcheckAllReceived() bool\ldisplayUnreceived() \l}", shape=record ];
	testProbe [ label="{testProbe|opChan chan operation\lchildReply chan operationReply\ltree *BinaryTreeSet\lcurrentTree map[int]bool\lexpectedResponses map[int]bool\lfinishedResponses replyTracker\lcurrentID int\lrng *rand.Rand\lreplyCount int\l|displayUnreceived() \lrun(chan int, chan int) \lchildChan() chan operation\lsendoperation(operation) error\linjectoperation(operation) \linjectgc() \lcheckReply(operationReply) bool\lcheckReceviedAllResponses() bool\lincrementID() \lmakeinsert(int) insert\lmakecontains(int) contains\lmakeremove(int) remove\lcoinFlip() bool\lrandomElement8() int\lrandomElement16() int\lrandomElement32() int\lrandomoperation() operation\l}", shape=record ];

}

