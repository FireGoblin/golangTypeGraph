digraph gographviz {
	Interface->stmtVisitor[ label=field, style=dashed ];
	Attrs->stmtVisitor[ label=field, style=dashed ];
	Interface->graphVisitor[ label=field, style=dashed ];
	GraphTYPE->Escape[ label=inherited, style=solid ];
	Attrs->GraphTYPE[ label=field, style=dashed ];
	Nodes->GraphTYPE[ label=field, style=dashed ];
	Edges->GraphTYPE[ label=field, style=dashed ];
	SubGraphs->GraphTYPE[ label=field, style=dashed ];
	Relations->GraphTYPE[ label=field, style=dashed ];
	Attrs->NodeTYPE[ label=field, style=dashed ];
	NodeTYPE->Nodes[ label=field, style=dashed ];
	GraphTYPE->writer[ label=inherited, style=solid ];
	Attrs->EdgeTYPE[ label=field, style=dashed ];
	EdgeTYPE->Edges[ label=field, style=dashed ];
	Attrs->SubGraphTYPE[ label=field, style=dashed ];
	SubGraphTYPE->SubGraphs[ label=field, style=dashed ];
	Escape->Interface[ label=implements, style=bold ];
	NodeInterface->GraphableNode[ label=inherited, style=solid ];
	EdgesInterface->GraphableNode[ label=inherited, style=solid ];
	Attrs [ label="{Attrs||Add(string, string) \lExtend(Attrs) \lAmmend(Attrs) \lSortedNames() []string\lCopy() Attrs\l}", shape=record ];
	EdgeTYPE [ label="{Edge|Src string\lSrcPort string\lDst string\lDstPort string\lDir bool\lAttrs Attrs\l|}", shape=record ];
	Edges [ label="{Edges|SrcToDsts map[string]map[string]*Edge\lDstToSrcs map[string]map[string]*Edge\lEdges []*Edge\l|Add(*Edge) \lSorted() []*Edge\l}", shape=record ];
	EdgesInterface [ label="{EdgesInterface||Edges() []*Edge\l}", shape=Mrecord ];
	Escape [ label="{Escape|Graph\l|SetName(string) \lAddPortEdge(string, bool, map[string]string) \lAddEdge(string, bool, map[string]string) \lAddNode(string, string, map[string]string) \lAddAttr(string, string) \lAddSubGraph(string, string, map[string]string) \lIsNode(string) bool\lIsSubGraph(string) bool\l}", shape=record ];
	GraphTYPE [ label="{Graph|Attrs Attrs\lName string\lDirected bool\lStrict bool\lNodes *Nodes\lEdges *Edges\lSubGraphs *SubGraphs\lRelations *Relations\l|SetStrict(bool) \lSetDir(bool) \lSetName(string) \lAddPortEdge(string, bool, map[string]string) \lAddEdge(string, bool, map[string]string) \lAddEdgesInterface(EdgesInterface) \lAddNode(string, string, map[string]string) \lAddNodeInterface(string, NodeInterface) \lAddGraphableNode(string, GraphableNode) \lAddGraphableNodes(string, []GraphableNode) \lgetAttrs(string) Attrs\lAddAttr(string, string, string) \lAddSubGraph(string, string, map[string]string) \lIsNode(string) bool\lIsSubGraph(string) bool\lWriteAst() *ast.Graph\lString() string\l}", shape=record ];
	GraphableNode [ label="{GraphableNode|NodeInterface\nEdgesInterface\n|}", shape=Mrecord ];
	Interface [ label="{Interface||SetStrict(bool) \lSetDir(bool) \lSetName(string) \lAddPortEdge(string, bool, map[string]string) \lAddEdge(string, bool, map[string]string) \lAddNode(string, string, map[string]string) \lAddAttr(string, string) \lAddSubGraph(string, string, map[string]string) \lString() string\l}", shape=Mrecord ];
	NodeInterface [ label="{NodeInterface||Name() string\lAttrs() Attrs\l}", shape=Mrecord ];
	NodeTYPE [ label="{Node|Name string\lAttrs Attrs\l|}", shape=record ];
	Nodes [ label="{Nodes|Lookup map[string]*Node\lNodes []*Node\l|Add(*Node) \lSorted() []*Node\l}", shape=record ];
	Relations [ label="{Relations|ParentToChildren map[string]map[string]bool\lChildToParents map[string]map[string]bool\l|Add(string, string) \lSortedChildren(string) []string\l}", shape=record ];
	SubGraphTYPE [ label="{SubGraph|Attrs Attrs\lName string\l|}", shape=record ];
	SubGraphs [ label="{SubGraphs|SubGraphs map[string]*SubGraph\l|Add(string) \lSorted() []*SubGraph\l}", shape=record ];
	graphVisitor [ label="{graphVisitor|g Interface\l|Visit(ast.Elem) ast.Visitor\l}", shape=record ];
	nilVisitor [ label="{nilVisitor||Visit(ast.Elem) ast.Visitor\l}", shape=record ];
	stmtVisitor [ label="{stmtVisitor|g Interface\lgraphName string\lcurrentNodeAttrs Attrs\lcurrentEdgeAttrs Attrs\lcurrentGraphAttrs Attrs\l|Visit(ast.Elem) ast.Visitor\lnodeStmt(ast.NodeStmt) ast.Visitor\ledgeStmt(ast.EdgeStmt) ast.Visitor\lnodeAttrs(ast.NodeAttrs) ast.Visitor\ledgeAttrs(ast.EdgeAttrs) ast.Visitor\lgraphAttrs(ast.GraphAttrs) ast.Visitor\lsubGraph(*ast.SubGraph) ast.Visitor\lattr(*ast.Attr) ast.Visitor\l}", shape=record ];
	writer [ label="{writer|Graph\lwrittenLocations map[string]bool\l|newSubGraph(string) *ast.SubGraph\lnewNodeId(string, string) *ast.NodeId\lnewNodeStmt(string) *ast.NodeStmt\lnewLocation(string, string) ast.Location\lnewEdgeStmt(*Edge) *ast.EdgeStmt\lWrite() *ast.Graph\l}", shape=record ];

}

