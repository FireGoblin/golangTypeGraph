digraph fmt {
	fmt_SEL_buffer->fmt_SEL_pp[ label=field, style=dashed ];
	reflect_SEL_Value->fmt_SEL_pp[ label=field, style=dashed ];
	fmt_SEL_fmt->fmt_SEL_pp[ label=field, style=dashed ];
	io_SEL_Reader->fmt_SEL_readRune[ label=field, style=dashed ];
	fmt_SEL_ssave->fmt_SEL_ss[ label=inherited, style=solid ];
	io_SEL_RuneReader->fmt_SEL_ss[ label=field, style=dashed ];
	fmt_SEL_buffer->fmt_SEL_ss[ label=field, style=dashed ];
	fmt_SEL_fmtFlags->fmt_SEL_fmt[ label=inherited, style=solid ];
	fmt_SEL_buffer->fmt_SEL_fmt[ label=field, style=dashed ];
	sync_SEL_Locker->sync_SEL_Cond[ label=field, style=dashed ];
	sync_SEL_syncSema->sync_SEL_Cond[ label=field, style=dashed ];
	sync_SEL_copyChecker->sync_SEL_Cond[ label=field, style=dashed ];
	sync_SEL_Mutex->sync_SEL_Once[ label=field, style=dashed ];
	sync_SEL_Mutex->sync_SEL_poolLocal[ label=inherited, style=solid ];
	sync_SEL_Mutex->sync_SEL_RWMutex[ label=field, style=dashed ];
	sync_SEL_RWMutex->sync_SEL_rlocker[ label=parent, style=solid ];
	reflect_SEL_Type->reflect_SEL_visit[ label=field, style=dashed ];
	reflect_SEL_bitVector->reflect_SEL_methodValue[ label=field, style=dashed ];
	reflect_SEL_Value->reflect_SEL_methodValue[ label=field, style=dashed ];
	reflect_SEL_bitVector->reflect_SEL_makeFuncImpl[ label=field, style=dashed ];
	reflect_SEL_funcType->reflect_SEL_makeFuncImpl[ label=field, style=dashed ];
	reflect_SEL_Type->reflect_SEL_Method[ label=field, style=dashed ];
	reflect_SEL_Value->reflect_SEL_Method[ label=field, style=dashed ];
	reflect_SEL_uncommonType->reflect_SEL_rtype[ label=inherited, style=solid ];
	reflect_SEL_typeAlg->reflect_SEL_rtype[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_rtype[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_funcType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_funcType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_method[ label=field, style=dashed ];
	reflect_SEL_Kind->reflect_SEL_cacheKey[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_cacheKey[ label=field, style=dashed ];
	reflect_SEL_method->reflect_SEL_uncommonType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_structField[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_imethod[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_structType[ label=inherited, style=solid ];
	reflect_SEL_structField->reflect_SEL_structType[ label=field, style=dashed ];
	reflect_SEL_Type->reflect_SEL_StructField[ label=field, style=dashed ];
	reflect_SEL_StructTag->reflect_SEL_StructField[ label=field, style=dashed ];
	reflect_SEL_structType->reflect_SEL_fieldScan[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_ptrType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_ptrType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_sliceType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_sliceType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_interfaceType[ label=inherited, style=solid ];
	reflect_SEL_imethod->reflect_SEL_interfaceType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_mapType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_mapType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_layoutType[ label=field, style=dashed ];
	reflect_SEL_bitVector->reflect_SEL_layoutType[ label=field, style=dashed ];
	sync_SEL_Pool->reflect_SEL_layoutType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_chanType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_chanType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_layoutKey[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_arrayType[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_arrayType[ label=field, style=dashed ];
	reflect_SEL_SelectDir->reflect_SEL_SelectCase[ label=field, style=dashed ];
	reflect_SEL_Value->reflect_SEL_SelectCase[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_emptyInterface[ label=field, style=dashed ];
	reflect_SEL_flag->reflect_SEL_Value[ label=inherited, style=solid ];
	reflect_SEL_rtype->reflect_SEL_Value[ label=field, style=dashed ];
	reflect_SEL_Kind->reflect_SEL_ValueError[ label=field, style=dashed ];
	reflect_SEL_rtype->reflect_SEL_runtimeSelect[ label=field, style=dashed ];
	io_SEL_Reader->io_SEL_LimitedReader[ label=field, style=dashed ];
	io_SEL_Reader->io_SEL_teeReader[ label=field, style=dashed ];
	io_SEL_Writer->io_SEL_teeReader[ label=field, style=dashed ];
	io_SEL_ReaderAt->io_SEL_SectionReader[ label=field, style=dashed ];
	io_SEL_Writer->io_SEL_multiWriter[ label=field, style=dashed ];
	io_SEL_Reader->io_SEL_multiReader[ label=field, style=dashed ];
	io_SEL_pipe->io_SEL_PipeReader[ label=field, style=dashed ];
	io_SEL_pipe->io_SEL_PipeWriter[ label=field, style=dashed ];
	sync_SEL_Mutex->io_SEL_pipe[ label=field, style=dashed ];
	sync_SEL_Cond->io_SEL_pipe[ label=field, style=dashed ];
	strconv_SEL_decimal->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_rtype->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_funcType->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_ChanDir->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_structType->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_Kind->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_ptrType->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_sliceType->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_interfaceType->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_mapType->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_chanType->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_arrayType->fmt_SEL_Stringer[ label=implements, style=invis ];
	reflect_SEL_Value->fmt_SEL_Stringer[ label=implements, style=invis ];
	fmt_SEL_pp->fmt_SEL_State[ label=implements, style=bold ];
	fmt_SEL_ss->fmt_SEL_ScanState[ label=implements, style=bold ];
	fmt_SEL_ss->fmt_SEL_runeUnreader[ label=implements, style=bold ];
	sync_SEL_Mutex->sync_SEL_Locker[ label=implements, style=bold ];
	sync_SEL_poolLocal->sync_SEL_Locker[ label=implements, style=bold ];
	sync_SEL_RWMutex->sync_SEL_Locker[ label=implements, style=bold ];
	sync_SEL_rlocker->sync_SEL_Locker[ label=implements, style=bold ];
	reflect_SEL_rtype->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_funcType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_structType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_ptrType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_sliceType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_interfaceType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_mapType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_chanType->reflect_SEL_Type[ label=implements, style=bold ];
	reflect_SEL_arrayType->reflect_SEL_Type[ label=implements, style=bold ];
	io_SEL_RuneReader->io_SEL_RuneScanner[ label=inherited, style=solid ];
	fmt_SEL_ss->io_SEL_RuneScanner[ label=implements, style=bold ];
	fmt_SEL_buffer->io_SEL_stringWriter[ label=implements, style=bold ];
	io_SEL_SectionReader->io_SEL_ReaderAt[ label=implements, style=bold ];
	io_SEL_Writer->io_SEL_WriteCloser[ label=inherited, style=solid ];
	io_SEL_Closer->io_SEL_WriteCloser[ label=inherited, style=solid ];
	io_SEL_PipeWriter->io_SEL_WriteCloser[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadCloser[ label=inherited, style=solid ];
	io_SEL_Closer->io_SEL_ReadCloser[ label=inherited, style=solid ];
	io_SEL_PipeReader->io_SEL_ReadCloser[ label=implements, style=bold ];
	io_SEL_Writer->io_SEL_WriteSeeker[ label=inherited, style=solid ];
	io_SEL_Seeker->io_SEL_WriteSeeker[ label=inherited, style=solid ];
	io_SEL_SectionReader->io_SEL_Seeker[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadWriter[ label=inherited, style=solid ];
	io_SEL_Writer->io_SEL_ReadWriter[ label=inherited, style=solid ];
	io_SEL_Reader->io_SEL_ReadWriteSeeker[ label=inherited, style=solid ];
	io_SEL_Writer->io_SEL_ReadWriteSeeker[ label=inherited, style=solid ];
	io_SEL_Seeker->io_SEL_ReadWriteSeeker[ label=inherited, style=solid ];
	io_SEL_ByteReader->io_SEL_ByteScanner[ label=inherited, style=solid ];
	fmt_SEL_pp->io_SEL_Writer[ label=implements, style=bold ];
	fmt_SEL_buffer->io_SEL_Writer[ label=implements, style=bold ];
	io_SEL_multiWriter->io_SEL_Writer[ label=implements, style=bold ];
	io_SEL_PipeWriter->io_SEL_Writer[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadWriteCloser[ label=inherited, style=solid ];
	io_SEL_Writer->io_SEL_ReadWriteCloser[ label=inherited, style=solid ];
	io_SEL_Closer->io_SEL_ReadWriteCloser[ label=inherited, style=solid ];
	fmt_SEL_readRune->io_SEL_RuneReader[ label=implements, style=bold ];
	fmt_SEL_ss->io_SEL_RuneReader[ label=implements, style=bold ];
	fmt_SEL_buffer->io_SEL_ByteWriter[ label=implements, style=bold ];
	fmt_SEL_stringReader->io_SEL_Reader[ label=implements, style=bold ];
	fmt_SEL_ss->io_SEL_Reader[ label=implements, style=bold ];
	io_SEL_LimitedReader->io_SEL_Reader[ label=implements, style=bold ];
	io_SEL_teeReader->io_SEL_Reader[ label=implements, style=bold ];
	io_SEL_SectionReader->io_SEL_Reader[ label=implements, style=bold ];
	io_SEL_multiReader->io_SEL_Reader[ label=implements, style=bold ];
	io_SEL_PipeReader->io_SEL_Reader[ label=implements, style=bold ];
	io_SEL_PipeReader->io_SEL_Closer[ label=implements, style=bold ];
	io_SEL_PipeWriter->io_SEL_Closer[ label=implements, style=bold ];
	io_SEL_Reader->io_SEL_ReadSeeker[ label=inherited, style=solid ];
	io_SEL_Seeker->io_SEL_ReadSeeker[ label=inherited, style=solid ];
	io_SEL_SectionReader->io_SEL_ReadSeeker[ label=implements, style=bold ];
	errors_SEL_errorString [ label="{errors.errorString|s string\l|Error() string\l}", shape=record ];
	fmt_SEL_Formatter [ label="{fmt.Formatter||Format(f State, c rune) \l}", shape=Mrecord ];
	fmt_SEL_GoStringer [ label="{fmt.GoStringer||GoString() string\l}", shape=Mrecord ];
	fmt_SEL_ScanState [ label="{fmt.ScanState||ReadRune() (r rune, size int, err error)\lUnreadRune() error\lSkipSpace() \lToken(skipSpace bool, f func(rune) bool) (token []byte, err error)\lWidth() (wid int, ok bool)\lRead(buf []byte) (n int, err error)\l}", shape=Mrecord ];
	fmt_SEL_Scanner [ label="{fmt.Scanner||Scan(state ScanState, verb rune) error\l}", shape=Mrecord ];
	fmt_SEL_State [ label="{fmt.State||Write(b []byte) (ret int, err error)\lWidth() (wid int, ok bool)\lPrecision() (prec int, ok bool)\lFlag(c int) bool\l}", shape=Mrecord ];
	fmt_SEL_Stringer [ label="{fmt.Stringer|*HIGHLY IMPLMENTED*\n|String() string\l}", shape=Mrecord ];
	fmt_SEL_buffer [ label="{fmt.buffer|[]byte|Write(b []byte) (ret int, err error)\lWriteString(s string) (n int, err error)\lWriteByte(c byte) error\lWriteRune(r rune) error\l}", shape=record ];
	fmt_SEL_fmt [ label="{fmt.fmt|fmtFlags\lintbuf [nByte]byte\lbuf *buffer\lwid int\lprec int\l|clearflags() \linit(buf *buffer) \lcomputePadding(width int) (padding []byte, leftWidth, rightWidth int)\lwritePadding(n int, padding []byte) \lpad(b []byte) \lpadString(s string) \lfmt_boolean(v bool) \linteger(a int64, base uint64, signedness bool, digits string) \ltruncate(s string) string\lfmt_s(s string) \lfmt_sbx(s string, b []byte, digits string) \lfmt_sx(s, digits string) \lfmt_bx(b []byte, digits string) \lfmt_q(s string) \lfmt_qc(c int64) \lformatFloat(v float64, verb byte, prec, n int) \lfmt_e64(v float64) \lfmt_E64(v float64) \lfmt_f64(v float64) \lfmt_g64(v float64) \lfmt_G64(v float64) \lfmt_fb64(v float64) \lfmt_e32(v float32) \lfmt_E32(v float32) \lfmt_f32(v float32) \lfmt_g32(v float32) \lfmt_G32(v float32) \lfmt_fb32(v float32) \lfmt_c64(v complex64, verb rune) \lfmt_c128(v complex128, verb rune) \lfmt_complex(r, j float64, size int, verb rune) \l}", shape=record ];
	fmt_SEL_fmtFlags [ label="{fmt.fmtFlags|widPresent bool\lprecPresent bool\lminus bool\lplus bool\lsharp bool\lspace bool\lunicode bool\luniQuote bool\lzero bool\lplusV bool\lsharpV bool\l|}", shape=record ];
	fmt_SEL_pp [ label="{fmt.pp|n int\lpanicking bool\lerroring bool\lbuf buffer\larg interface\{\}\lvalue reflect.Value\lreordered bool\lgoodArgNum bool\lruneBuf [utf8.UTFMax]byte\lfmt fmt\l|free() \lWidth() (wid int, ok bool)\lPrecision() (prec int, ok bool)\lFlag(c int) bool\ladd(c rune) \lWrite(b []byte) (ret int, err error)\lunknownType(v reflect.Value) \lbadVerb(verb rune) \lfmtBool(v bool, verb rune) \lfmtC(c int64) \lfmtInt64(v int64, verb rune) \lfmt0x64(v uint64, leading0x bool) \lfmtUnicode(v int64) \lfmtUint64(v uint64, verb rune) \lfmtFloat32(v float32, verb rune) \lfmtFloat64(v float64, verb rune) \lfmtComplex64(v complex64, verb rune) \lfmtComplex128(v complex128, verb rune) \lfmtString(v string, verb rune) \lfmtBytes(v []byte, verb rune, typ reflect.Type, depth int) \lfmtPointer(value reflect.Value, verb rune) \lcatchPanic(arg interface\{\}, verb rune) \lclearSpecialFlags() (plusV, sharpV bool)\lrestoreSpecialFlags(plusV, sharpV bool) \lhandleMethods(verb rune, depth int) (handled bool)\lprintArg(arg interface\{\}, verb rune, depth int) (wasString bool)\lprintValue(value reflect.Value, verb rune, depth int) (wasString bool)\lprintReflectValue(value reflect.Value, verb rune, depth int) (wasString bool)\largNumber(argNum int, format string, i int, numArgs int) (newArgNum, newi int, found bool)\ldoPrintf(format string, a []interface\{\}) \ldoPrint(a []interface\{\}, addspace, addnewline bool) \l}", shape=record ];
	fmt_SEL_readRune [ label="{fmt.readRune|reader io.Reader\lbuf [utf8.UTFMax]byte\lpending int\lpendBuf [utf8.UTFMax]byte\l|readByte() (b byte, err error)\lunread(buf []byte) \lReadRune() (r rune, size int, err error)\l}", shape=record ];
	fmt_SEL_runeUnreader [ label="{fmt.runeUnreader||UnreadRune() error\l}", shape=Mrecord ];
	fmt_SEL_scanError [ label="{fmt.scanError|err error\l|}", shape=record ];
	fmt_SEL_ss [ label="{fmt.ss|ssave\lrr io.RuneReader\lbuf buffer\lpeekRune rune\lprevRune rune\lcount int\latEOF bool\l|Read(buf []byte) (n int, err error)\lReadRune() (r rune, size int, err error)\lWidth() (wid int, ok bool)\lgetRune() (r rune)\lmustReadRune() (r rune)\lUnreadRune() error\lerror(err error) \lerrorString(err string) \lToken(skipSpace bool, f func(rune) bool) (token []byte, err error)\lSkipSpace() \lfree(old ssave) \lskipSpace(stopAtNewline bool) \ltoken(skipSpace bool, f func(rune) bool) []byte\lconsume(ok string, accept bool) bool\lpeek(ok string) bool\lnotEOF() \laccept(ok string) bool\lokVerb(verb rune, okVerbs, typ string) bool\lscanBool(verb rune) bool\lgetBase(verb rune) (base int, digits string)\lscanNumber(digits string, haveDigits bool) string\lscanRune(bitSize int) int64\lscanBasePrefix() (base int, digits string, found bool)\lscanInt(verb rune, bitSize int) int64\lscanUint(verb rune, bitSize int) uint64\lfloatToken() string\lcomplexTokens() (real, imag string)\lconvertFloat(str string, n int) float64\lscanComplex(verb rune, n int) complex128\lconvertString(verb rune) (str string)\lquotedString() string\lhexByte() (b byte, ok bool)\lhexString() string\lscanOne(verb rune, arg interface\{\}) \ldoScan(a []interface\{\}) (numProcessed int, err error)\ladvance(format string) (i int)\ldoScanf(format string, a []interface\{\}) (numProcessed int, err error)\l}", shape=record ];
	fmt_SEL_ssave [ label="{fmt.ssave|validSave bool\lnlIsEnd bool\lnlIsSpace bool\largLimit int\llimit int\lmaxWid int\l|}", shape=record ];
	fmt_SEL_stringReader [ label="{fmt.stringReader|string|Read(buf []byte) (n int, err error)\l}", shape=record ];
	io_SEL_ByteReader [ label="{io.ByteReader||ReadByte() (c byte, err error)\l}", shape=Mrecord ];
	io_SEL_ByteScanner [ label="{io.ByteScanner|ByteReader\n|UnreadByte() error\l}", shape=Mrecord ];
	io_SEL_ByteWriter [ label="{io.ByteWriter||WriteByte(c byte) error\l}", shape=Mrecord ];
	io_SEL_Closer [ label="{io.Closer||Close() error\l}", shape=Mrecord ];
	io_SEL_LimitedReader [ label="{io.LimitedReader|R Reader\lN int64\l|Read(buf []byte) (n int, err error)\l}", shape=record ];
	io_SEL_PipeReader [ label="{io.PipeReader|p *pipe\l|Read(buf []byte) (n int, err error)\lClose() error\lCloseWithError(err error) error\l}", shape=record ];
	io_SEL_PipeWriter [ label="{io.PipeWriter|p *pipe\l|Write(b []byte) (ret int, err error)\lClose() error\lCloseWithError(err error) error\l}", shape=record ];
	io_SEL_ReadCloser [ label="{io.ReadCloser|Reader\nCloser\n|}", shape=Mrecord ];
	io_SEL_ReadSeeker [ label="{io.ReadSeeker|Reader\nSeeker\n|}", shape=Mrecord ];
	io_SEL_ReadWriteCloser [ label="{io.ReadWriteCloser|Reader\nWriter\nCloser\n|}", shape=Mrecord ];
	io_SEL_ReadWriteSeeker [ label="{io.ReadWriteSeeker|Reader\nWriter\nSeeker\n|}", shape=Mrecord ];
	io_SEL_ReadWriter [ label="{io.ReadWriter|Reader\nWriter\n|}", shape=Mrecord ];
	io_SEL_Reader [ label="{io.Reader||Read(buf []byte) (n int, err error)\l}", shape=Mrecord ];
	io_SEL_ReaderAt [ label="{io.ReaderAt||ReadAt(p []byte, off int64) (n int, err error)\l}", shape=Mrecord ];
	io_SEL_ReaderFrom [ label="{io.ReaderFrom||ReadFrom(r Reader) (n int64, err error)\l}", shape=Mrecord ];
	io_SEL_RuneReader [ label="{io.RuneReader||ReadRune() (r rune, size int, err error)\l}", shape=Mrecord ];
	io_SEL_RuneScanner [ label="{io.RuneScanner|RuneReader\n|UnreadRune() error\l}", shape=Mrecord ];
	io_SEL_SectionReader [ label="{io.SectionReader|r ReaderAt\lbase int64\loff int64\llimit int64\l|Read(buf []byte) (n int, err error)\lSeek(offset int64, whence int) (int64, error)\lReadAt(p []byte, off int64) (n int, err error)\lSize() int64\l}", shape=record ];
	io_SEL_Seeker [ label="{io.Seeker||Seek(offset int64, whence int) (int64, error)\l}", shape=Mrecord ];
	io_SEL_WriteCloser [ label="{io.WriteCloser|Writer\nCloser\n|}", shape=Mrecord ];
	io_SEL_WriteSeeker [ label="{io.WriteSeeker|Writer\nSeeker\n|}", shape=Mrecord ];
	io_SEL_Writer [ label="{io.Writer||Write(b []byte) (ret int, err error)\l}", shape=Mrecord ];
	io_SEL_WriterAt [ label="{io.WriterAt||WriteAt(p []byte, off int64) (n int, err error)\l}", shape=Mrecord ];
	io_SEL_WriterTo [ label="{io.WriterTo||WriteTo(w Writer) (n int64, err error)\l}", shape=Mrecord ];
	io_SEL_multiReader [ label="{io.multiReader|readers []Reader\l|Read(buf []byte) (n int, err error)\l}", shape=record ];
	io_SEL_multiWriter [ label="{io.multiWriter|writers []Writer\l|Write(b []byte) (ret int, err error)\l}", shape=record ];
	io_SEL_pipe [ label="{io.pipe|rl sync.Mutex\lwl sync.Mutex\ll sync.Mutex\ldata []byte\lrwait sync.Cond\lwwait sync.Cond\lrerr error\lwerr error\l|read(b []byte) (n int, err error)\lwrite(b []byte) (n int, err error)\lrclose(err error) \lwclose(err error) \l}", shape=record ];
	io_SEL_pipeResult [ label="{io.pipeResult|n int\lerr error\l|}", shape=record ];
	io_SEL_stringWriter [ label="{io.stringWriter||WriteString(s string) (n int, err error)\l}", shape=Mrecord ];
	io_SEL_teeReader [ label="{io.teeReader|r Reader\lw Writer\l|Read(buf []byte) (n int, err error)\l}", shape=record ];
	reflect_SEL_ChanDir [ label="{reflect.ChanDir|int|String() string\l}", shape=record ];
	reflect_SEL_Kind [ label="{reflect.Kind|uint|String() string\l}", shape=record ];
	reflect_SEL_Method [ label="{reflect.Method|Name string\lPkgPath string\lType Type\lFunc Value\lIndex int\l|}", shape=record ];
	reflect_SEL_SelectCase [ label="{reflect.SelectCase|Dir SelectDir\lChan Value\lSend Value\l|}", shape=record ];
	reflect_SEL_SelectDir [ label="{reflect.SelectDir|int|}", shape=record ];
	reflect_SEL_SliceHeader [ label="{reflect.SliceHeader|Data uintptr\lLen int\lCap int\l|}", shape=record ];
	reflect_SEL_StringHeader [ label="{reflect.StringHeader|Data uintptr\lLen int\l|}", shape=record ];
	reflect_SEL_StructField [ label="{reflect.StructField|Name string\lPkgPath string\lType Type\lTag StructTag\lOffset uintptr\lIndex []int\lAnonymous bool\l|}", shape=record ];
	reflect_SEL_StructTag [ label="{reflect.StructTag|string|Get(key string) string\l}", shape=record ];
	reflect_SEL_Type [ label="{reflect.Type||Align() int\lFieldAlign() int\lMethod(int) Method\lMethodByName(string) (Method, bool)\lNumMethod() int\lName() string\lPkgPath() string\lSize() uintptr\lString() string\lKind() Kind\lImplements(u Type) bool\lAssignableTo(u Type) bool\lConvertibleTo(u Type) bool\lComparable() bool\lBits() int\lChanDir() ChanDir\lIsVariadic() bool\lElem() Type\lField(i int) StructField\lFieldByIndex(index []int) StructField\lFieldByName(name string) (StructField, bool)\lFieldByNameFunc(match func(string) bool) (StructField, bool)\lIn(i int) Type\lKey() Type\lLen() int\lNumField() int\lNumIn() int\lNumOut() int\lOut(i int) Type\lcommon() *rtype\luncommon() *uncommonType\l}", shape=Mrecord ];
	reflect_SEL_Value [ label="{reflect.Value|flag\ltyp *rtype\lptr unsafe.Pointer\l|pointer() unsafe.Pointer\lAddr() Value\lBool() bool\lBytes() []byte\lrunes() []rune\lCanAddr() bool\lCanSet() bool\lCall(in []Value) []Value\lCallSlice(in []Value) []Value\lcall(op string, in []Value) []Value\lCap() int\lClose() \lComplex() complex128\lElem() Value\lField(i int) Value\lFieldByIndex(index []int) Value\lFieldByName(name string) Value\lFieldByNameFunc(match func(string) bool) Value\lFloat() float64\lIndex(i int) Value\lInt() int64\lCanInterface() bool\lInterface() (i interface\{\})\lInterfaceData() [2]uintptr\lIsNil() bool\lIsValid() bool\lKind() Kind\lLen() int\lMapIndex(key Value) Value\lMapKeys() []Value\lMethod(i int) Value\lNumMethod() int\lMethodByName(name string) Value\lNumField() int\lOverflowComplex(x complex128) bool\lOverflowFloat(x float64) bool\lOverflowInt(x int64) bool\lOverflowUint(x uint64) bool\lPointer() uintptr\lRecv() (x Value, ok bool)\lrecv(nb bool) (val Value, ok bool)\lSend(x Value) \lsend(x Value, nb bool) (selected bool)\lSet(x Value) \lSetBool(x bool) \lSetBytes(x []byte) \lsetRunes(x []rune) \lSetComplex(x complex128) \lSetFloat(x float64) \lSetInt(x int64) \lSetLen(n int) \lSetCap(n int) \lSetMapIndex(key, val Value) \lSetUint(x uint64) \lSetPointer(x unsafe.Pointer) \lSetString(x string) \lSlice(i, j int) Value\lSlice3(i, j, k int) Value\lString() string\lTryRecv() (x Value, ok bool)\lTrySend(x Value) bool\lType() Type\lUint() uint64\lUnsafeAddr() uintptr\lassignTo(context string, dst *rtype, target unsafe.Pointer) Value\lConvert(t Type) Value\l}", shape=record ];
	reflect_SEL_ValueError [ label="{reflect.ValueError|Method string\lKind Kind\l|Error() string\l}", shape=record ];
	reflect_SEL_arrayType [ label="{reflect.arrayType|rtype\lelem *rtype\lslice *rtype\llen uintptr\l|}", shape=record ];
	reflect_SEL_bitVector [ label="{reflect.bitVector|n uint32\ldata []byte\l|append(bit uint8) \l}", shape=record ];
	reflect_SEL_cacheKey [ label="{reflect.cacheKey|kind Kind\lt1 *rtype\lt2 *rtype\lextra uintptr\l|}", shape=record ];
	reflect_SEL_chanType [ label="{reflect.chanType|rtype\lelem *rtype\ldir uintptr\l|}", shape=record ];
	reflect_SEL_emptyInterface [ label="{reflect.emptyInterface|typ *rtype\lword unsafe.Pointer\l|}", shape=record ];
	reflect_SEL_fieldScan [ label="{reflect.fieldScan|typ *structType\lindex []int\l|}", shape=record ];
	reflect_SEL_flag [ label="{reflect.flag|uintptr|kind() Kind\lmustBe(expected Kind) \lmustBeExported() \lmustBeAssignable() \l}", shape=record ];
	reflect_SEL_funcType [ label="{reflect.funcType|rtype\ldotdotdot bool\lin []*rtype\lout []*rtype\l|}", shape=record ];
	reflect_SEL_imethod [ label="{reflect.imethod|name *string\lpkgPath *string\ltyp *rtype\l|}", shape=record ];
	reflect_SEL_interfaceType [ label="{reflect.interfaceType|rtype\lmethods []imethod\l|Method(int) Method\lNumMethod() int\lMethodByName(string) (Method, bool)\l}", shape=record ];
	reflect_SEL_layoutKey [ label="{reflect.layoutKey|t *rtype\lrcvr *rtype\l|}", shape=record ];
	reflect_SEL_layoutType [ label="{reflect.layoutType|t *rtype\largSize uintptr\lretOffset uintptr\lstack *bitVector\lframePool *sync.Pool\l|}", shape=record ];
	reflect_SEL_makeFuncImpl [ label="{reflect.makeFuncImpl|code uintptr\lstack *bitVector\ltyp *funcType\lfn func([]Value) []Value\l|}", shape=record ];
	reflect_SEL_mapType [ label="{reflect.mapType|rtype\lkey *rtype\lelem *rtype\lbucket *rtype\lhmap *rtype\lkeysize uint8\lindirectkey uint8\lvaluesize uint8\lindirectvalue uint8\lbucketsize uint16\lreflexivekey bool\l|}", shape=record ];
	reflect_SEL_method [ label="{reflect.method|name *string\lpkgPath *string\lmtyp *rtype\ltyp *rtype\lifn unsafe.Pointer\ltfn unsafe.Pointer\l|}", shape=record ];
	reflect_SEL_methodValue [ label="{reflect.methodValue|fn uintptr\lstack *bitVector\lmethod int\lrcvr Value\l|}", shape=record ];
	reflect_SEL_nonEmptyInterface [ label="{reflect.nonEmptyInterface|itab *struct\{ityp *rtype, typ *rtype, link unsafe.Pointer, bad int32, unused int32, fun [100000]unsafe.Pointer\}\lword unsafe.Pointer\l|}", shape=record ];
	reflect_SEL_ptrType [ label="{reflect.ptrType|rtype\lelem *rtype\l|}", shape=record ];
	reflect_SEL_rtype [ label="{reflect.rtype|uncommonType\lsize uintptr\lptrdata uintptr\lhash uint32\l_ uint8\lalign uint8\lfieldAlign uint8\lkind uint8\lalg *typeAlg\lgcdata *byte\lstring *string\lptrToThis *rtype\lzero unsafe.Pointer\l|String() string\lSize() uintptr\lBits() int\lAlign() int\lFieldAlign() int\lKind() Kind\lpointers() bool\lcommon() *rtype\lNumMethod() int\lMethod(int) Method\lMethodByName(string) (Method, bool)\lPkgPath() string\lName() string\lChanDir() ChanDir\lIsVariadic() bool\lElem() Type\lField(i int) StructField\lFieldByIndex(index []int) StructField\lFieldByName(name string) (StructField, bool)\lFieldByNameFunc(match func(string) bool) (StructField, bool)\lIn(i int) Type\lKey() Type\lLen() int\lNumField() int\lNumIn() int\lNumOut() int\lOut(i int) Type\lptrTo() *rtype\lImplements(u Type) bool\lAssignableTo(u Type) bool\lConvertibleTo(u Type) bool\lComparable() bool\l}", shape=record ];
	reflect_SEL_runtimeSelect [ label="{reflect.runtimeSelect|dir uintptr\ltyp *rtype\lch unsafe.Pointer\lval unsafe.Pointer\l|}", shape=record ];
	reflect_SEL_sliceHeader [ label="{reflect.sliceHeader|Data unsafe.Pointer\lLen int\lCap int\l|}", shape=record ];
	reflect_SEL_sliceType [ label="{reflect.sliceType|rtype\lelem *rtype\l|}", shape=record ];
	reflect_SEL_stringHeader [ label="{reflect.stringHeader|Data unsafe.Pointer\lLen int\l|}", shape=record ];
	reflect_SEL_structField [ label="{reflect.structField|name *string\lpkgPath *string\ltyp *rtype\ltag *string\loffset uintptr\l|}", shape=record ];
	reflect_SEL_structType [ label="{reflect.structType|rtype\lfields []structField\l|Field(i int) StructField\lFieldByIndex(index []int) StructField\lFieldByNameFunc(match func(string) bool) (StructField, bool)\lFieldByName(name string) (StructField, bool)\l}", shape=record ];
	reflect_SEL_typeAlg [ label="{reflect.typeAlg|hash func(unsafe.Pointer, uintptr) uintptr\lequal func(unsafe.Pointer, unsafe.Pointer) bool\l|}", shape=record ];
	reflect_SEL_uncommonType [ label="{reflect.uncommonType|name *string\lpkgPath *string\lmethods []method\l|uncommon() *uncommonType\lPkgPath() string\lName() string\lMethod(int) Method\lNumMethod() int\lMethodByName(string) (Method, bool)\l}", shape=record ];
	reflect_SEL_visit [ label="{reflect.visit|a1 uintptr\la2 uintptr\ltyp Type\l|}", shape=record ];
	strconv_SEL_NumError [ label="{strconv.NumError|Func string\lNum string\lErr error\l|Error() string\l}", shape=record ];
	strconv_SEL_decimal [ label="{strconv.decimal|d [800]byte\lnd int\ldp int\lneg bool\ltrunc bool\l|String() string\lAssign(v uint64) \lShift(k int) \lRound(nd int) \lRoundDown(nd int) \lRoundUp(nd int) \lRoundedInteger() uint64\l}", shape=record ];
	strconv_SEL_decimalSlice [ label="{strconv.decimalSlice|d []byte\lnd int\ldp int\lneg bool\l|}", shape=record ];
	strconv_SEL_extFloat [ label="{strconv.extFloat|mant uint64\lexp int\lneg bool\l|floatBits(flt *floatInfo) (bits uint64, overflow bool)\lAssignComputeBounds(mant uint64, exp int, neg bool, flt *floatInfo) (lower, upper extFloat)\lNormalize() (shift uint)\lMultiply(g extFloat) \lAssignDecimal(mantissa uint64, exp10 int, neg bool, trunc bool, flt *floatInfo) (ok bool)\lfrexp10() (exp10, index int)\lFixedDecimal(d *decimalSlice, n int) bool\lShortestDecimal(d *decimalSlice, lower, upper *extFloat) bool\l}", shape=record ];
	strconv_SEL_floatInfo [ label="{strconv.floatInfo|mantbits uint\lexpbits uint\lbias int\l|}", shape=record ];
	strconv_SEL_leftCheat [ label="{strconv.leftCheat|delta int\lcutoff string\l|}", shape=record ];
	sync_SEL_Cond [ label="{sync.Cond|L Locker\lsema syncSema\lwaiters uint32\lchecker copyChecker\l|Wait() \lSignal() \lBroadcast() \lsignalImpl(all bool) \l}", shape=record ];
	sync_SEL_Locker [ label="{sync.Locker||Lock() \lUnlock() \l}", shape=Mrecord ];
	sync_SEL_Mutex [ label="{sync.Mutex|state int32\lsema uint32\l|Lock() \lUnlock() \l}", shape=record ];
	sync_SEL_Once [ label="{sync.Once|m Mutex\ldone uint32\l|Do(f func()) \l}", shape=record ];
	sync_SEL_Pool [ label="{sync.Pool|local unsafe.Pointer\llocalSize uintptr\lNew func() interface\{\}\l|Put(x interface\{\}) \lGet() interface\{\}\lgetSlow() (x interface\{\})\lpin() *poolLocal\lpinSlow() *poolLocal\l}", shape=record ];
	sync_SEL_RWMutex [ label="{sync.RWMutex|w Mutex\lwriterSem uint32\lreaderSem uint32\lreaderCount int32\lreaderWait int32\l|RLock() \lRUnlock() \lLock() \lUnlock() \lRLocker() Locker\l}", shape=record ];
	sync_SEL_WaitGroup [ label="{sync.WaitGroup|state1 [12]byte\lsema uint32\l|state() *uint64\lAdd(delta int) \lDone() \lWait() \l}", shape=record ];
	sync_SEL_copyChecker [ label="{sync.copyChecker|uintptr|check() \l}", shape=record ];
	sync_SEL_poolLocal [ label="{sync.poolLocal|Mutex\lprivate interface\{\}\lshared []interface\{\}\lpad [128]byte\l|}", shape=record ];
	sync_SEL_rlocker [ label="{sync.rlocker|RWMutex|Lock() \lUnlock() \l}", shape=record ];
	sync_SEL_syncSema [ label="{sync.syncSema|lock uintptr\lhead unsafe.Pointer\ltail unsafe.Pointer\l|}", shape=record ];

}

