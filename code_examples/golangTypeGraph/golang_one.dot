digraph golangTypeGraph {
	gographviz_SEL_GraphableNode->baseType[ label=field, style=dashed ];
	Type->function[ label=field, style=dashed ];
	baseType->interfaceNode[ label=field, style=dashed ];
	function->interfaceNode[ label=field, style=dashed ];
	interfaceNode->interfaceNode[ label=field, style=dashed ];
	structNode->interfaceNode[ label=field, style=dashed ];
	gographviz_SEL_Attrs->interfaceNode[ label=field, style=dashed ];
	Type->namedType[ label=field, style=dashed ];
	baseType->structNode[ label=field, style=dashed ];
	Type->structNode[ label=field, style=dashed ];
	namedType->structNode[ label=field, style=dashed ];
	receiverFunction->structNode[ label=field, style=dashed ];
	interfaceNode->structNode[ label=field, style=dashed ];
	gographviz_SEL_Attrs->structNode[ label=field, style=dashed ];
	baseType->unknownNode[ label=field, style=dashed ];
	function->masterFuncMap[ label=parent, style=solid ];
	Type->masterTypeMap[ label=field, style=dashed ];
	function->receiverFunction[ label=field, style=dashed ];
	namedType->receiverFunction[ label=field, style=dashed ];
	baseType->Type[ label=field, style=dashed ];
	gographviz_SEL_Attrs->gographviz_SEL_NodeTYPE[ label=field, style=dashed ];
	gographviz_SEL_NodeTYPE->gographviz_SEL_Nodes[ label=field, style=dashed ];
	gographviz_SEL_GraphTYPE->gographviz_SEL_writer[ label=inherited, style=solid ];
	gographviz_SEL_Attrs->gographviz_SEL_EdgeTYPE[ label=field, style=dashed ];
	gographviz_SEL_EdgeTYPE->gographviz_SEL_Edges[ label=field, style=dashed ];
	gographviz_SEL_Attrs->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_Nodes->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_Edges->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_SubGraphs->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_Relations->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_Interface->gographviz_SEL_graphVisitor[ label=field, style=dashed ];
	gographviz_SEL_Interface->gographviz_SEL_stmtVisitor[ label=field, style=dashed ];
	gographviz_SEL_Attrs->gographviz_SEL_stmtVisitor[ label=field, style=dashed ];
	gographviz_SEL_GraphTYPE->gographviz_SEL_Escape[ label=inherited, style=solid ];
	gographviz_SEL_Attrs->gographviz_SEL_SubGraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_SubGraphTYPE->gographviz_SEL_SubGraphs[ label=field, style=dashed ];
	interfaceNode->gographviz_SEL_NodeInterface[ label=implements, style=bold ];
	structNode->gographviz_SEL_NodeInterface[ label=implements, style=bold ];
	unknownNode->gographviz_SEL_NodeInterface[ label=implements, style=bold ];
	interfaceNode->gographviz_SEL_EdgesInterface[ label=implements, style=bold ];
	structNode->gographviz_SEL_EdgesInterface[ label=implements, style=bold ];
	unknownNode->gographviz_SEL_EdgesInterface[ label=implements, style=bold ];
	gographviz_SEL_writer->gographviz_SEL_Interface[ label=implements, style=bold ];
	gographviz_SEL_GraphTYPE->gographviz_SEL_Interface[ label=implements, style=bold ];
	gographviz_SEL_Escape->gographviz_SEL_Interface[ label=implements, style=bold ];
	gographviz_SEL_NodeInterface->gographviz_SEL_GraphableNode[ label=inherited, style=solid ];
	gographviz_SEL_EdgesInterface->gographviz_SEL_GraphableNode[ label=inherited, style=solid ];
	interfaceNode->gographviz_SEL_GraphableNode[ label=implements, style=bold ];
	structNode->gographviz_SEL_GraphableNode[ label=implements, style=bold ];
	unknownNode->gographviz_SEL_GraphableNode[ label=implements, style=bold ];
	Type [ label="{Type|name string\lbase *baseType\lastNode ast.Expr\l|String() string\lstringRelativePkg(pkg string) string\l}", shape=record ];
	baseType [ label="{baseType|name string\lnode gographviz.GraphableNode\lpkgName string\l|addNode(n gographviz.GraphableNode) \lName() string\lstringRelativePkg(pkg string) string\lString() string\l}", shape=record ];
	function [ label="{function|name string\ltarget *Type\lparamTypes []*Type\lreturnTypes []*Type\lisReceiver bool\lastNode *ast.FuncType\l|String() string\llookupString() string\l}", shape=record ];
	gographviz_SEL_Attrs [ label="{gographviz.Attrs|map[string]string|Add(parent string, child string) \lExtend(more Attrs) \lAmmend(more Attrs) \lSortedNames() []string\lCopy() Attrs\l}", shape=record ];
	gographviz_SEL_EdgeTYPE [ label="{gographviz.Edge|Src string\lSrcPort string\lDst string\lDstPort string\lDir bool\lAttrs Attrs\l|}", shape=record ];
	gographviz_SEL_Edges [ label="{gographviz.Edges|SrcToDsts map[string]map[string]*Edge\lDstToSrcs map[string]map[string]*Edge\lEdges []*Edge\l|Add(edge *Edge) \lSorted() []*Edge\l}", shape=record ];
	gographviz_SEL_EdgesInterface [ label="{gographviz.EdgesInterface||Edges() []*gographviz.Edge\l}", shape=Mrecord ];
	gographviz_SEL_Escape [ label="{gographviz.Escape|Graph\l|SetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lIsNode(name string) bool\lIsSubGraph(name string) bool\l}", shape=record ];
	gographviz_SEL_GraphTYPE [ label="{gographviz.Graph|Attrs Attrs\lName string\lDirected bool\lStrict bool\lNodes *Nodes\lEdges *Edges\lSubGraphs *SubGraphs\lRelations *Relations\l|SetStrict(strict bool) \lSetDir(directed bool) \lSetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddEdgesInterface(edges EdgesInterface) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddNodeInterface(parentGraph string, node NodeInterface) \lAddGraphableNode(parentGraph string, node GraphableNode) \lAddGraphableNodes(parentGraph string, nodes []GraphableNode) \lgetAttrs(graphName string) Attrs\lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lIsNode(name string) bool\lIsSubGraph(name string) bool\lWriteAst() *ast.Graph\lString() string\l}", shape=record ];
	gographviz_SEL_GraphableNode [ label="{gographviz.GraphableNode|NodeInterface\nEdgesInterface\n|}", shape=Mrecord ];
	gographviz_SEL_Interface [ label="{gographviz.Interface||SetStrict(strict bool) \lSetDir(directed bool) \lSetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lString() string\l}", shape=Mrecord ];
	gographviz_SEL_NodeInterface [ label="{gographviz.NodeInterface||Name() string\lAttrs() gographviz.Attrs\l}", shape=Mrecord ];
	gographviz_SEL_NodeTYPE [ label="{gographviz.Node|Name string\lAttrs Attrs\l|}", shape=record ];
	gographviz_SEL_Nodes [ label="{gographviz.Nodes|Lookup map[string]*Node\lNodes []*Node\l|Add(node *Node) \lSorted() []*Node\l}", shape=record ];
	gographviz_SEL_Relations [ label="{gographviz.Relations|ParentToChildren map[string]map[string]bool\lChildToParents map[string]map[string]bool\l|Add(parent string, child string) \lSortedChildren(parent string) []string\l}", shape=record ];
	gographviz_SEL_SubGraphTYPE [ label="{gographviz.SubGraph|Attrs Attrs\lName string\l|}", shape=record ];
	gographviz_SEL_SubGraphs [ label="{gographviz.SubGraphs|SubGraphs map[string]*SubGraph\l|Add(name string) \lSorted() []*SubGraph\l}", shape=record ];
	gographviz_SEL_graphVisitor [ label="{gographviz.graphVisitor|g Interface\l|Visit(v ast.Elem) ast.Visitor\l}", shape=record ];
	gographviz_SEL_nilVisitor [ label="{gographviz.nilVisitor||Visit(v ast.Elem) ast.Visitor\l}", shape=record ];
	gographviz_SEL_stmtVisitor [ label="{gographviz.stmtVisitor|g Interface\lgraphName string\lcurrentNodeAttrs Attrs\lcurrentEdgeAttrs Attrs\lcurrentGraphAttrs Attrs\l|Visit(v ast.Elem) ast.Visitor\lnodeStmt(stmt ast.NodeStmt) ast.Visitor\ledgeStmt(stmt ast.EdgeStmt) ast.Visitor\lnodeAttrs(stmt ast.NodeAttrs) ast.Visitor\ledgeAttrs(stmt ast.EdgeAttrs) ast.Visitor\lgraphAttrs(stmt ast.GraphAttrs) ast.Visitor\lsubGraph(stmt *ast.SubGraph) ast.Visitor\lattr(stmt *ast.Attr) ast.Visitor\l}", shape=record ];
	gographviz_SEL_writer [ label="{gographviz.writer|Graph\lwrittenLocations map[string]bool\l|newSubGraph(name string) *ast.SubGraph\lnewNodeId(name string, port string) *ast.NodeId\lnewNodeStmt(name string) *ast.NodeStmt\lnewLocation(name string, port string) ast.Location\lnewEdgeStmt(edge *Edge) *ast.EdgeStmt\lWrite() *ast.Graph\l}", shape=record ];
	interfaceNode [ label="{interfaceNode|target *baseType\lrequiredFunctions []*function\linheritedInterfaces []*interfaceNode\limplementedByCache []*structNode\lextraAttrs gographviz.Attrs\lastNode *ast.InterfaceType\l|String() string\lName() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\lhighlyImplemented() bool\llabel() string\limplementedAttrs() map[string]string\lisImplementedBy(s *structNode) bool\lsetImplementedBy(s []*structNode) []*structNode\limplementedBy(s []*structNode) []*structNode\lallRequiredFunctions() []*function\lremakeInterfaceInternals(interfaceType *ast.InterfaceType) \lremakeInterface(spec *ast.TypeSpec) *interfaceNode\l}", shape=record ];
	masterFuncMap [ label="{masterFuncMap|map[string]*function|lookupOrAddFromExpr(name string, expr *ast.FuncType) *function\l}", shape=record ];
	masterTypeMap [ label="{masterTypeMap|theMap map[string]map[string]*Type\lcurrentPkg string\l|currentMap() map[string]*Type\lgetPkg(pkg string) map[string]*Type\llookupOrAdd(s string) *Type\llookupOrAddWithPkg(s string, pkg string) *Type\llookupOrAddFromExpr(expr ast.Expr) *Type\l}", shape=record ];
	namedType [ label="{namedType|name string\ltarget *Type\l|String() string\lstringRelativePkg(pkg string) string\lNode() gographviz.GraphableNode\l}", shape=record ];
	receiverFunction [ label="{receiverFunction|f *function\lreceiverField namedType\l|SlimString() string\lString() string\l}", shape=record ];
	structNode [ label="{structNode|target *baseType\lparent *Type\lfields []namedType\lreceiverFunctions []receiverFunction\linheritedTypes []*baseType\linterfaceCache []*interfaceNode\lextraAttrs gographviz.Attrs\lastNode ast.Expr\l|addFunction(f *function, field *ast.Field) \lString() string\lName() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\llabel() string\lparentEdge() *gographviz.Edge\lallreceiverFunctions() []*function\limplementsInterface(i *interfaceNode) bool\lsetInterfacesImplemented(i []*interfaceNode) \linterfacesImplemented(i []*interfaceNode) []*interfaceNode\lremakeStructInternals(spec *ast.TypeSpec) \l}", shape=record ];
	unknownNode [ label="{unknownNode|target *baseType\l|Name() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\lremakeStruct(spec *ast.TypeSpec) *structNode\lremakeInterface(spec *ast.TypeSpec) *interfaceNode\l}", shape=record ];

}

