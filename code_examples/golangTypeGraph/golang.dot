digraph golangTypeGraph {
	Type->masterTypeMap[ label=field, style=dashed ];
	Type->namedType[ label=field, style=dashed ];
	function->receiverFunction[ label=field, style=dashed ];
	namedType->receiverFunction[ label=field, style=dashed ];
	baseType->Type[ label=field, style=dashed ];
	Type->function[ label=field, style=dashed ];
	baseType->structNode[ label=field, style=dashed ];
	Type->structNode[ label=field, style=dashed ];
	namedType->structNode[ label=field, style=dashed ];
	receiverFunction->structNode[ label=field, style=dashed ];
	interfaceNode->structNode[ label=field, style=dashed ];
	baseType->unknownNode[ label=field, style=dashed ];
	baseType->interfaceNode[ label=field, style=dashed ];
	function->interfaceNode[ label=field, style=dashed ];
	interfaceNode->interfaceNode[ label=field, style=dashed ];
	structNode->interfaceNode[ label=field, style=dashed ];
	function->masterFuncMap[ label=parent, style=solid ];
	Type [ label="{Type|name string\lbase *baseType\lastNode ast.Expr\l|String() string\lstringRelativePkg(pkg string) string\l}", shape=record ];
	baseType [ label="{baseType|name string\lnode gographviz.GraphableNode\lpkgName string\l|addNode(n gographviz.GraphableNode) \lName() string\lstringRelativePkg(pkg string) string\lString() string\l}", shape=record ];
	function [ label="{function|name string\ltarget *Type\lparamTypes []*Type\lreturnTypes []*Type\lisReceiver bool\lastNode *ast.FuncType\l|String() string\llookupString() string\l}", shape=record ];
	interfaceNode [ label="{interfaceNode|target *baseType\lrequiredFunctions []*function\linheritedInterfaces []*interfaceNode\limplementedByCache []*structNode\lextraAttrs gographviz.Attrs\lastNode *ast.InterfaceType\l|String() string\lName() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\lhighlyImplemented() bool\llabel() string\limplementedAttrs() map[string]string\lisImplementedBy(s *structNode) bool\lsetImplementedBy(s []*structNode) []*structNode\limplementedBy(s []*structNode) []*structNode\lallRequiredFunctions() []*function\lremakeInterfaceInternals(interfaceType *ast.InterfaceType) \lremakeInterface(spec *ast.TypeSpec) *interfaceNode\l}", shape=record ];
	masterFuncMap [ label="{masterFuncMap|map[string]*function|lookupOrAddFromExpr(name string, expr *ast.FuncType) *function\l}", shape=record ];
	masterTypeMap [ label="{masterTypeMap|theMap map[string]map[string]*Type\lcurrentPkg string\l|currentMap() map[string]*Type\lgetPkg(pkg string) map[string]*Type\llookupOrAdd(s string) *Type\llookupOrAddWithPkg(s string, pkg string) *Type\llookupOrAddFromExpr(expr ast.Expr) *Type\l}", shape=record ];
	namedType [ label="{namedType|name string\ltarget *Type\l|String() string\lstringRelativePkg(pkg string) string\lNode() gographviz.GraphableNode\l}", shape=record ];
	receiverFunction [ label="{receiverFunction|f *function\lreceiverField namedType\l|SlimString() string\lString() string\l}", shape=record ];
	structNode [ label="{structNode|target *baseType\lparent *Type\lfields []namedType\lreceiverFunctions []receiverFunction\linheritedTypes []*baseType\linterfaceCache []*interfaceNode\lextraAttrs gographviz.Attrs\lastNode ast.Expr\l|addFunction(f *function, field *ast.Field) \lString() string\lName() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\llabel() string\lparentEdge() *gographviz.Edge\lallreceiverFunctions() []*function\limplementsInterface(i *interfaceNode) bool\lsetInterfacesImplemented(i []*interfaceNode) \linterfacesImplemented(i []*interfaceNode) []*interfaceNode\lremakeStructInternals(spec *ast.TypeSpec) \l}", shape=record ];
	unknownNode [ label="{unknownNode|target *baseType\l|Name() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\lremakeStruct(spec *ast.TypeSpec) *structNode\lremakeInterface(spec *ast.TypeSpec) *interfaceNode\l}", shape=record ];

}

