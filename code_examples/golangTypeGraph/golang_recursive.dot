digraph golangTypeGraph {
	baseType->unknownNode[ label=field, style=dashed ];
	Type->function[ label=field, style=dashed ];
	Type->namedType[ label=field, style=dashed ];
	function->receiverFunction[ label=field, style=dashed ];
	namedType->receiverFunction[ label=field, style=dashed ];
	baseType->Type[ label=field, style=dashed ];
	baseType->structNode[ label=field, style=dashed ];
	Type->structNode[ label=field, style=dashed ];
	namedType->structNode[ label=field, style=dashed ];
	receiverFunction->structNode[ label=field, style=dashed ];
	interfaceNode->structNode[ label=field, style=dashed ];
	gographviz_SEL_Attrs->structNode[ label=field, style=dashed ];
	gographviz_SEL_GraphableNode->baseType[ label=field, style=dashed ];
	baseType->interfaceNode[ label=field, style=dashed ];
	function->interfaceNode[ label=field, style=dashed ];
	interfaceNode->interfaceNode[ label=field, style=dashed ];
	structNode->interfaceNode[ label=field, style=dashed ];
	gographviz_SEL_Attrs->interfaceNode[ label=field, style=dashed ];
	function->masterFuncMap[ label=parent, style=solid ];
	Type->masterTypeMap[ label=field, style=dashed ];
	gographviz_SEL_Attrs->gographviz_SEL_SubGraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_SubGraphTYPE->gographviz_SEL_SubGraphs[ label=field, style=dashed ];
	gographviz_SEL_GraphTYPE->gographviz_SEL_writer[ label=inherited, style=solid ];
	gographviz_SEL_Interface->gographviz_SEL_graphVisitor[ label=field, style=dashed ];
	gographviz_SEL_Interface->gographviz_SEL_stmtVisitor[ label=field, style=dashed ];
	gographviz_SEL_Attrs->gographviz_SEL_stmtVisitor[ label=field, style=dashed ];
	gographviz_SEL_GraphTYPE->gographviz_SEL_Escape[ label=inherited, style=solid ];
	gographviz_SEL_Attrs->gographviz_SEL_NodeTYPE[ label=field, style=dashed ];
	gographviz_SEL_NodeTYPE->gographviz_SEL_Nodes[ label=field, style=dashed ];
	gographviz_SEL_Attrs->gographviz_SEL_EdgeTYPE[ label=field, style=dashed ];
	gographviz_SEL_EdgeTYPE->gographviz_SEL_Edges[ label=field, style=dashed ];
	gographviz_SEL_Attrs->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_Nodes->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_Edges->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_SubGraphs->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	gographviz_SEL_Relations->gographviz_SEL_GraphTYPE[ label=field, style=dashed ];
	parser_SEL_Action->parser_SEL_ActionRow[ label=parent, style=solid ];
	parser_SEL_GotoRow->parser_SEL_GotoTab[ label=parent, style=solid ];
	parser_SEL_ProdTabEntry->parser_SEL_ProdTab[ label=parent, style=solid ];
	parser_SEL_NT->parser_SEL_ProdTabEntry[ label=field, style=dashed ];
	parser_SEL_State->parser_SEL_stack[ label=field, style=dashed ];
	parser_SEL_Attrib->parser_SEL_stack[ label=field, style=dashed ];
	parser_SEL_ActionTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_GotoTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_ProdTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_stack->parser_SEL_Parser[ label=field, style=dashed ];
	token_SEL_Token->parser_SEL_Parser[ label=field, style=dashed ];
	token_SEL_Position->parser_SEL_Parser[ label=field, style=dashed ];
	token_SEL_TokenMap->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_ActionRow->parser_SEL_ActionTab[ label=parent, style=solid ];
	parser_SEL_State->parser_SEL_Shift[ label=parent, style=solid ];
	parser_SEL_State->parser_SEL_GotoRow[ label=parent, style=solid ];
	token_SEL_Type->token_SEL_TokenMap[ label=field, style=dashed ];
	token_SEL_Type->token_SEL_Token[ label=field, style=dashed ];
	token_SEL_TokenMap->scanner_SEL_Scanner[ label=field, style=dashed ];
	token_SEL_Position->scanner_SEL_Scanner[ label=field, style=dashed ];
	token_SEL_Position->scanner_SEL_Error[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_GraphAttrs[ label=parent, style=solid ];
	ast_SEL_AList->ast_SEL_AttrList[ label=parent, style=solid ];
	ast_SEL_EdgeRH->ast_SEL_EdgeRHS[ label=parent, style=solid ];
	ast_SEL_NodeId->ast_SEL_NodeStmt[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_NodeStmt[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_SubGraphTYPE[ label=field, style=dashed ];
	ast_SEL_StmtList->ast_SEL_SubGraphTYPE[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_EdgeAttrs[ label=parent, style=solid ];
	ast_SEL_Id->ast_SEL_NodeId[ label=field, style=dashed ];
	ast_SEL_Port->ast_SEL_NodeId[ label=field, style=dashed ];
	ast_SEL_GraphType->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_StmtList->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_EdgeOp->ast_SEL_EdgeRH[ label=field, style=dashed ];
	ast_SEL_Location->ast_SEL_EdgeRH[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_Attr[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_StmtList[ label=parent, style=solid ];
	ast_SEL_Id->ast_SEL_Port[ label=field, style=dashed ];
	ast_SEL_Location->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_EdgeRHS->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_NodeAttrs[ label=parent, style=solid ];
	ast_SEL_Attr->ast_SEL_AList[ label=parent, style=solid ];
	gographviz_SEL_writer->gographviz_SEL_Interface[ label=implements, style=bold ];
	gographviz_SEL_Escape->gographviz_SEL_Interface[ label=implements, style=bold ];
	gographviz_SEL_GraphTYPE->gographviz_SEL_Interface[ label=implements, style=bold ];
	unknownNode->gographviz_SEL_NodeInterface[ label=implements, style=bold ];
	structNode->gographviz_SEL_NodeInterface[ label=implements, style=bold ];
	interfaceNode->gographviz_SEL_NodeInterface[ label=implements, style=bold ];
	unknownNode->gographviz_SEL_EdgesInterface[ label=implements, style=bold ];
	structNode->gographviz_SEL_EdgesInterface[ label=implements, style=bold ];
	interfaceNode->gographviz_SEL_EdgesInterface[ label=implements, style=bold ];
	gographviz_SEL_NodeInterface->gographviz_SEL_GraphableNode[ label=inherited, style=solid ];
	gographviz_SEL_EdgesInterface->gographviz_SEL_GraphableNode[ label=inherited, style=solid ];
	unknownNode->gographviz_SEL_GraphableNode[ label=implements, style=bold ];
	structNode->gographviz_SEL_GraphableNode[ label=implements, style=bold ];
	interfaceNode->gographviz_SEL_GraphableNode[ label=implements, style=bold ];
	function->parser_SEL_Attrib[ label=implements, style=invis ];
	namedType->parser_SEL_Attrib[ label=implements, style=invis ];
	receiverFunction->parser_SEL_Attrib[ label=implements, style=invis ];
	Type->parser_SEL_Attrib[ label=implements, style=invis ];
	structNode->parser_SEL_Attrib[ label=implements, style=invis ];
	baseType->parser_SEL_Attrib[ label=implements, style=invis ];
	interfaceNode->parser_SEL_Attrib[ label=implements, style=invis ];
	gographviz_SEL_writer->parser_SEL_Attrib[ label=implements, style=invis ];
	gographviz_SEL_Escape->parser_SEL_Attrib[ label=implements, style=invis ];
	gographviz_SEL_GraphTYPE->parser_SEL_Attrib[ label=implements, style=invis ];
	parser_SEL_ActionRow->parser_SEL_Attrib[ label=implements, style=invis ];
	parser_SEL_Accept->parser_SEL_Attrib[ label=implements, style=invis ];
	parser_SEL_stack->parser_SEL_Attrib[ label=implements, style=invis ];
	parser_SEL_Reduce->parser_SEL_Attrib[ label=implements, style=invis ];
	parser_SEL_Shift->parser_SEL_Attrib[ label=implements, style=invis ];
	token_SEL_TokenMap->parser_SEL_Attrib[ label=implements, style=invis ];
	token_SEL_Token->parser_SEL_Attrib[ label=implements, style=invis ];
	token_SEL_Position->parser_SEL_Attrib[ label=implements, style=invis ];
	token_SEL_Type->parser_SEL_Attrib[ label=implements, style=invis ];
	scanner_SEL_Error->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_Id->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_Bool->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_GraphAttrs->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_AttrList->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_EdgeRHS->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_NodeStmt->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_SubGraphTYPE->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_EdgeAttrs->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_NodeId->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_GraphTYPE->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_EdgeRH->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_Attr->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_StmtList->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_EdgeOp->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_Port->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_EdgeStmt->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_GraphType->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_NodeAttrs->parser_SEL_Attrib[ label=implements, style=invis ];
	ast_SEL_AList->parser_SEL_Attrib[ label=implements, style=invis ];
	scanner_SEL_Scanner->parser_SEL_Scanner[ label=implements, style=bold ];
	parser_SEL_Accept->parser_SEL_Action[ label=implements, style=bold ];
	parser_SEL_Reduce->parser_SEL_Action[ label=implements, style=bold ];
	parser_SEL_Shift->parser_SEL_Action[ label=implements, style=bold ];
	function->ast_SEL_Elem[ label=implements, style=invis ];
	namedType->ast_SEL_Elem[ label=implements, style=invis ];
	receiverFunction->ast_SEL_Elem[ label=implements, style=invis ];
	Type->ast_SEL_Elem[ label=implements, style=invis ];
	structNode->ast_SEL_Elem[ label=implements, style=invis ];
	baseType->ast_SEL_Elem[ label=implements, style=invis ];
	interfaceNode->ast_SEL_Elem[ label=implements, style=invis ];
	gographviz_SEL_writer->ast_SEL_Elem[ label=implements, style=invis ];
	gographviz_SEL_Escape->ast_SEL_Elem[ label=implements, style=invis ];
	gographviz_SEL_GraphTYPE->ast_SEL_Elem[ label=implements, style=invis ];
	parser_SEL_ActionRow->ast_SEL_Elem[ label=implements, style=invis ];
	parser_SEL_Accept->ast_SEL_Elem[ label=implements, style=invis ];
	parser_SEL_stack->ast_SEL_Elem[ label=implements, style=invis ];
	parser_SEL_Reduce->ast_SEL_Elem[ label=implements, style=invis ];
	parser_SEL_Shift->ast_SEL_Elem[ label=implements, style=invis ];
	token_SEL_TokenMap->ast_SEL_Elem[ label=implements, style=invis ];
	token_SEL_Token->ast_SEL_Elem[ label=implements, style=invis ];
	token_SEL_Position->ast_SEL_Elem[ label=implements, style=invis ];
	token_SEL_Type->ast_SEL_Elem[ label=implements, style=invis ];
	scanner_SEL_Error->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Id->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Bool->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_GraphAttrs->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_AttrList->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeRHS->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_NodeStmt->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_SubGraphTYPE->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeAttrs->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_NodeId->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_GraphTYPE->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeRH->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Attr->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_StmtList->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeOp->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Port->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeStmt->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_GraphType->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_NodeAttrs->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_AList->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Elem->ast_SEL_Location[ label=inherited, style=solid ];
	ast_SEL_Walkable->ast_SEL_Location[ label=inherited, style=solid ];
	ast_SEL_SubGraphTYPE->ast_SEL_Location[ label=implements, style=bold ];
	ast_SEL_NodeId->ast_SEL_Location[ label=implements, style=bold ];
	ast_SEL_Elem->ast_SEL_Stmt[ label=inherited, style=solid ];
	ast_SEL_Walkable->ast_SEL_Stmt[ label=inherited, style=solid ];
	ast_SEL_GraphAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_NodeStmt->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_SubGraphTYPE->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_EdgeAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_Attr->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_EdgeStmt->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_NodeAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	gographviz_SEL_nilVisitor->ast_SEL_Visitor[ label=implements, style=bold ];
	gographviz_SEL_graphVisitor->ast_SEL_Visitor[ label=implements, style=bold ];
	gographviz_SEL_stmtVisitor->ast_SEL_Visitor[ label=implements, style=bold ];
	ast_SEL_Id->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_Bool->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_GraphAttrs->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_AttrList->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeRHS->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_NodeStmt->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_SubGraphTYPE->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeAttrs->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_NodeId->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_GraphTYPE->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeRH->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_Attr->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_StmtList->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeOp->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_Port->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeStmt->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_GraphType->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_NodeAttrs->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_AList->ast_SEL_Walkable[ label=implements, style=invis ];
	Type [ label="{Type|name string\lbase *baseType\lastNode ast.Expr\l|String() string\lstringRelativePkg(pkg string) string\l}", shape=record ];
	ast_SEL_AList [ label="{ast.AList|[]*Attr|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Attr [ label="{ast.Attr|Field Id\lValue Id\l|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_AttrList [ label="{ast.AttrList|[]AList|String() string\lWalk(v Visitor) \lGetMap() map[string]string\l}", shape=record ];
	ast_SEL_Bool [ label="{ast.Bool|bool|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeAttrs [ label="{ast.EdgeAttrs|AttrList|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeOp [ label="{ast.EdgeOp|bool|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeRH [ label="{ast.EdgeRH|Op EdgeOp\lDestination Location\l|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeRHS [ label="{ast.EdgeRHS|[]*EdgeRH|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeStmt [ label="{ast.EdgeStmt|Source Location\lEdgeRHS EdgeRHS\lAttrs AttrList\l|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Elem [ label="{ast.Elem|*HIGHLY IMPLMENTED*\n|String() string\l}", shape=Mrecord ];
	ast_SEL_GraphAttrs [ label="{ast.GraphAttrs|AttrList|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_GraphTYPE [ label="{ast.Graph|Type GraphType\lStrict bool\lId Id\lStmtList StmtList\l|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_GraphType [ label="{ast.GraphType|bool|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Id [ label="{ast.Id|string|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Location [ label="{ast.Location|Elem\nWalkable\n|isLocation() \lGetId() Id\lGetPort() Port\lIsNode() bool\l}", shape=Mrecord ];
	ast_SEL_NodeAttrs [ label="{ast.NodeAttrs|AttrList|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_NodeId [ label="{ast.NodeId|Id Id\lPort Port\l|isLocation() \lIsNode() bool\lString() string\lGetId() Id\lGetPort() Port\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_NodeStmt [ label="{ast.NodeStmt|NodeId *NodeId\lAttrs AttrList\l|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Port [ label="{ast.Port|Id1 Id\lId2 Id\l|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Stmt [ label="{ast.Stmt|Elem\nWalkable\n|isStmt() \l}", shape=Mrecord ];
	ast_SEL_StmtList [ label="{ast.StmtList|[]Stmt|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_SubGraphTYPE [ label="{ast.SubGraph|Id Id\lStmtList StmtList\l|isStmt() \lGetId() Id\lGetPort() Port\lString() string\lWalk(v Visitor) \lisLocation() \lIsNode() bool\l}", shape=record ];
	ast_SEL_Visitor [ label="{ast.Visitor||Visit(v ast.Elem) ast.Visitor\l}", shape=Mrecord ];
	ast_SEL_Walkable [ label="{ast.Walkable|*HIGHLY IMPLMENTED*\n|Walk(v Visitor) \l}", shape=Mrecord ];
	baseType [ label="{baseType|name string\lnode gographviz.GraphableNode\lpkgName string\l|addNode(n gographviz.GraphableNode) \lName() string\lstringRelativePkg(pkg string) string\lString() string\l}", shape=record ];
	function [ label="{function|name string\ltarget *Type\lparamTypes []*Type\lreturnTypes []*Type\lisReceiver bool\lastNode *ast.FuncType\l|String() string\llookupString() string\l}", shape=record ];
	gographviz_SEL_Attrs [ label="{gographviz.Attrs|map[string]string|Add(parent string, child string) \lExtend(more Attrs) \lAmmend(more Attrs) \lSortedNames() []string\lCopy() Attrs\l}", shape=record ];
	gographviz_SEL_EdgeTYPE [ label="{gographviz.Edge|Src string\lSrcPort string\lDst string\lDstPort string\lDir bool\lAttrs Attrs\l|}", shape=record ];
	gographviz_SEL_Edges [ label="{gographviz.Edges|SrcToDsts map[string]map[string]*Edge\lDstToSrcs map[string]map[string]*Edge\lEdges []*Edge\l|Add(edge *Edge) \lSorted() []*Edge\l}", shape=record ];
	gographviz_SEL_EdgesInterface [ label="{gographviz.EdgesInterface||Edges() []*gographviz.Edge\l}", shape=Mrecord ];
	gographviz_SEL_Escape [ label="{gographviz.Escape|Graph\l|SetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lIsNode(name string) bool\lIsSubGraph(name string) bool\l}", shape=record ];
	gographviz_SEL_GraphTYPE [ label="{gographviz.Graph|Attrs Attrs\lName string\lDirected bool\lStrict bool\lNodes *Nodes\lEdges *Edges\lSubGraphs *SubGraphs\lRelations *Relations\l|SetStrict(strict bool) \lSetDir(directed bool) \lSetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddEdgesInterface(edges EdgesInterface) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddNodeInterface(parentGraph string, node NodeInterface) \lAddGraphableNode(parentGraph string, node GraphableNode) \lAddGraphableNodes(parentGraph string, nodes []GraphableNode) \lgetAttrs(graphName string) Attrs\lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lIsNode(name string) bool\lIsSubGraph(name string) bool\lWriteAst() *ast.Graph\lString() string\l}", shape=record ];
	gographviz_SEL_GraphableNode [ label="{gographviz.GraphableNode|NodeInterface\nEdgesInterface\n|}", shape=Mrecord ];
	gographviz_SEL_Interface [ label="{gographviz.Interface||SetStrict(strict bool) \lSetDir(directed bool) \lSetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lString() string\l}", shape=Mrecord ];
	gographviz_SEL_NodeInterface [ label="{gographviz.NodeInterface||Name() string\lAttrs() gographviz.Attrs\l}", shape=Mrecord ];
	gographviz_SEL_NodeTYPE [ label="{gographviz.Node|Name string\lAttrs Attrs\l|}", shape=record ];
	gographviz_SEL_Nodes [ label="{gographviz.Nodes|Lookup map[string]*Node\lNodes []*Node\l|Add(node *Node) \lSorted() []*Node\l}", shape=record ];
	gographviz_SEL_Relations [ label="{gographviz.Relations|ParentToChildren map[string]map[string]bool\lChildToParents map[string]map[string]bool\l|Add(parent string, child string) \lSortedChildren(parent string) []string\l}", shape=record ];
	gographviz_SEL_SubGraphTYPE [ label="{gographviz.SubGraph|Attrs Attrs\lName string\l|}", shape=record ];
	gographviz_SEL_SubGraphs [ label="{gographviz.SubGraphs|SubGraphs map[string]*SubGraph\l|Add(name string) \lSorted() []*SubGraph\l}", shape=record ];
	gographviz_SEL_graphVisitor [ label="{gographviz.graphVisitor|g Interface\l|Visit(v ast.Elem) ast.Visitor\l}", shape=record ];
	gographviz_SEL_nilVisitor [ label="{gographviz.nilVisitor||Visit(v ast.Elem) ast.Visitor\l}", shape=record ];
	gographviz_SEL_stmtVisitor [ label="{gographviz.stmtVisitor|g Interface\lgraphName string\lcurrentNodeAttrs Attrs\lcurrentEdgeAttrs Attrs\lcurrentGraphAttrs Attrs\l|Visit(v ast.Elem) ast.Visitor\lnodeStmt(stmt ast.NodeStmt) ast.Visitor\ledgeStmt(stmt ast.EdgeStmt) ast.Visitor\lnodeAttrs(stmt ast.NodeAttrs) ast.Visitor\ledgeAttrs(stmt ast.EdgeAttrs) ast.Visitor\lgraphAttrs(stmt ast.GraphAttrs) ast.Visitor\lsubGraph(stmt *ast.SubGraph) ast.Visitor\lattr(stmt *ast.Attr) ast.Visitor\l}", shape=record ];
	gographviz_SEL_writer [ label="{gographviz.writer|Graph\lwrittenLocations map[string]bool\l|newSubGraph(name string) *ast.SubGraph\lnewNodeId(name string, port string) *ast.NodeId\lnewNodeStmt(name string) *ast.NodeStmt\lnewLocation(name string, port string) ast.Location\lnewEdgeStmt(edge *Edge) *ast.EdgeStmt\lWrite() *ast.Graph\l}", shape=record ];
	interfaceNode [ label="{interfaceNode|target *baseType\lrequiredFunctions []*function\linheritedInterfaces []*interfaceNode\limplementedByCache []*structNode\lextraAttrs gographviz.Attrs\lastNode *ast.InterfaceType\l|String() string\lName() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\lhighlyImplemented() bool\llabel() string\limplementedAttrs() map[string]string\lisImplementedBy(s *structNode) bool\lsetImplementedBy(s []*structNode) []*structNode\limplementedBy(s []*structNode) []*structNode\lallRequiredFunctions() []*function\lremakeInterfaceInternals(interfaceType *ast.InterfaceType) \lremakeInterface(spec *ast.TypeSpec) *interfaceNode\l}", shape=record ];
	masterFuncMap [ label="{masterFuncMap|map[string]*function|lookupOrAddFromExpr(name string, expr *ast.FuncType) *function\l}", shape=record ];
	masterTypeMap [ label="{masterTypeMap|theMap map[string]map[string]*Type\lcurrentPkg string\l|currentMap() map[string]*Type\lgetPkg(pkg string) map[string]*Type\llookupOrAdd(s string) *Type\llookupOrAddWithPkg(s string, pkg string) *Type\llookupOrAddFromExpr(expr ast.Expr) *Type\l}", shape=record ];
	namedType [ label="{namedType|name string\ltarget *Type\l|String() string\lstringRelativePkg(pkg string) string\lNode() gographviz.GraphableNode\l}", shape=record ];
	parser_SEL_Accept [ label="{parser.Accept|int|Act() \lString() string\l}", shape=record ];
	parser_SEL_Action [ label="{parser.Action||Act() \lString() string\l}", shape=Mrecord ];
	parser_SEL_ActionRow [ label="{parser.ActionRow|map[token.Type]Action|String() string\l}", shape=record ];
	parser_SEL_ActionTab [ label="{parser.ActionTab|[]ActionRow|}", shape=record ];
	parser_SEL_Attrib [ label="{parser.Attrib|*HIGHLY IMPLMENTED*\n|String() string\l}", shape=Mrecord ];
	parser_SEL_GotoRow [ label="{parser.GotoRow|map[NT]State|}", shape=record ];
	parser_SEL_GotoTab [ label="{parser.GotoTab|[]GotoRow|}", shape=record ];
	parser_SEL_NT [ label="{parser.NT|string|}", shape=record ];
	parser_SEL_Parser [ label="{parser.Parser|actTab ActionTab\lgotoTab GotoTab\lprodTab ProdTab\lstack *stack\lnextToken *token.Token\lpos token.Position\ltokenMap *token.TokenMap\l|Error(err error) error\lTokString(tok *token.Token) string\lParse(scanner Scanner) (res interface\{\}, err error)\l}", shape=record ];
	parser_SEL_ProdTab [ label="{parser.ProdTab|[]ProdTabEntry|}", shape=record ];
	parser_SEL_ProdTabEntry [ label="{parser.ProdTabEntry|String string\lHead NT\lNumSymbols int\lReduceFunc func([]Attrib) (Attrib, error)\l|}", shape=record ];
	parser_SEL_Reduce [ label="{parser.Reduce|int|Act() \lString() string\l}", shape=record ];
	parser_SEL_Scanner [ label="{parser.Scanner||Scan() (*token.Token, token.Position)\l}", shape=Mrecord ];
	parser_SEL_Shift [ label="{parser.Shift|State|Act() \lString() string\l}", shape=record ];
	parser_SEL_State [ label="{parser.State|int|}", shape=record ];
	parser_SEL_stack [ label="{parser.stack|state []State\lattrib []Attrib\l|Push(s State, a Attrib) \lTop() State\lPopN(items int) []Attrib\lString() string\l}", shape=record ];
	receiverFunction [ label="{receiverFunction|f *function\lreceiverField namedType\l|SlimString() string\lString() string\l}", shape=record ];
	scanner_SEL_Error [ label="{scanner.Error|Pos token.Position\lMsg string\l|String() string\l}", shape=record ];
	scanner_SEL_ErrorHandler [ label="{scanner.ErrorHandler||Error(pos token.Position, msg string) \l}", shape=Mrecord ];
	scanner_SEL_Scanner [ label="{scanner.Scanner|src []byte\ltokenMap *token.TokenMap\lpos token.Position\loffset int\lch rune\lErrorCount int\l|next() \lInit(src []byte, tokenMap *token.TokenMap) \lerror(pos token.Position, msg string) \lexpect(ch rune) \lscanComment(pos token.Position) \lfindNewline(pos token.Position) bool\lscanEscape(quote rune) \lscanChar(pos token.Position) \lisToken(str string) bool\lscanIdentifier() token.Type\lscanNumber() token.Type\lscanHTML() token.Type\lscanSDTLit(pos token.Position) \lscanString(pos token.Position) \lscanRawString(pos token.Position) \lskipWhitespace() \lswitch2(tok0, tok1 token.Type) token.Type\lswitch3(tok0, tok1 token.Type, ch2 rune, tok2 token.Type) token.Type\lswitch4(tok0, tok1 token.Type, ch2 rune, tok2, tok3 token.Type) token.Type\lScan() (*token.Token, token.Position)\l}", shape=record ];
	structNode [ label="{structNode|target *baseType\lparent *Type\lfields []namedType\lreceiverFunctions []receiverFunction\linheritedTypes []*baseType\linterfaceCache []*interfaceNode\lextraAttrs gographviz.Attrs\lastNode ast.Expr\l|addFunction(f *function, field *ast.Field) \lString() string\lName() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\llabel() string\lparentEdge() *gographviz.Edge\lallreceiverFunctions() []*function\limplementsInterface(i *interfaceNode) bool\lsetInterfacesImplemented(i []*interfaceNode) \linterfacesImplemented(i []*interfaceNode) []*interfaceNode\lremakeStructInternals(spec *ast.TypeSpec) \l}", shape=record ];
	token_SEL_Position [ label="{token.Position|Offset int\lLine int\lColumn int\l|IsValid() bool\lString() string\l}", shape=record ];
	token_SEL_Token [ label="{token.Token|Type Type\lLit []byte\l|Equals(that *Token) bool\lString() string\lIntValue() (int64, error)\lUintValue() (uint64, error)\lSDTVal() string\l}", shape=record ];
	token_SEL_TokenMap [ label="{token.TokenMap|tokenMap []string\lstringMap map[string]Type\l|AddToken(str string) \lType(key string) Type\lTokenString(typ Type) string\lString() string\lStrings() []string\lEquals(that *TokenMap) bool\lTokens() []*Token\lWriteFile(file string) error\l}", shape=record ];
	token_SEL_Type [ label="{token.Type|int|String() string\l}", shape=record ];
	unknownNode [ label="{unknownNode|target *baseType\l|Name() string\lAttrs() gographviz.Attrs\lEdges() []*gographviz.Edge\lremakeStruct(spec *ast.TypeSpec) *structNode\lremakeInterface(spec *ast.TypeSpec) *interfaceNode\l}", shape=record ];

}

