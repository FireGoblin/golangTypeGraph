digraph gographviz {
	Interface->graphVisitor[ label=field, style=dashed ];
	Interface->stmtVisitor[ label=field, style=dashed ];
	Attrs->stmtVisitor[ label=field, style=dashed ];
	Attrs->GraphTYPE[ label=field, style=dashed ];
	Nodes->GraphTYPE[ label=field, style=dashed ];
	Edges->GraphTYPE[ label=field, style=dashed ];
	SubGraphs->GraphTYPE[ label=field, style=dashed ];
	Relations->GraphTYPE[ label=field, style=dashed ];
	Attrs->NodeTYPE[ label=field, style=dashed ];
	NodeTYPE->Nodes[ label=field, style=dashed ];
	GraphTYPE->writer[ label=inherited, style=solid ];
	EdgeTYPE->Edges[ label=field, style=dashed ];
	Attrs->EdgeTYPE[ label=field, style=dashed ];
	GraphTYPE->Escape[ label=inherited, style=solid ];
	Attrs->SubGraphTYPE[ label=field, style=dashed ];
	SubGraphTYPE->SubGraphs[ label=field, style=dashed ];
	token_SEL_Type->token_SEL_Token[ label=field, style=dashed ];
	token_SEL_Type->token_SEL_TokenMap[ label=field, style=dashed ];
	token_SEL_Position->scanner_SEL_Error[ label=field, style=dashed ];
	token_SEL_TokenMap->scanner_SEL_Scanner[ label=field, style=dashed ];
	token_SEL_Position->scanner_SEL_Scanner[ label=field, style=dashed ];
	parser_SEL_ActionRow->parser_SEL_ActionTab[ label=parent, style=solid ];
	parser_SEL_ProdTabEntry->parser_SEL_ProdTab[ label=parent, style=solid ];
	parser_SEL_State->parser_SEL_stack[ label=field, style=dashed ];
	parser_SEL_Attrib->parser_SEL_stack[ label=field, style=dashed ];
	parser_SEL_GotoRow->parser_SEL_GotoTab[ label=parent, style=solid ];
	parser_SEL_ActionTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_GotoTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_ProdTab->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_stack->parser_SEL_Parser[ label=field, style=dashed ];
	token_SEL_Token->parser_SEL_Parser[ label=field, style=dashed ];
	token_SEL_Position->parser_SEL_Parser[ label=field, style=dashed ];
	token_SEL_TokenMap->parser_SEL_Parser[ label=field, style=dashed ];
	parser_SEL_State->parser_SEL_Shift[ label=parent, style=solid ];
	parser_SEL_NT->parser_SEL_ProdTabEntry[ label=field, style=dashed ];
	parser_SEL_Action->parser_SEL_ActionRow[ label=parent, style=solid ];
	parser_SEL_State->parser_SEL_GotoRow[ label=parent, style=solid ];
	ast_SEL_AttrList->ast_SEL_EdgeAttrs[ label=parent, style=solid ];
	ast_SEL_Attr->ast_SEL_AList[ label=parent, style=solid ];
	ast_SEL_AttrList->ast_SEL_GraphAttrs[ label=parent, style=solid ];
	ast_SEL_Id->ast_SEL_Port[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_Attr[ label=field, style=dashed ];
	ast_SEL_NodeId->ast_SEL_NodeStmt[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_NodeStmt[ label=field, style=dashed ];
	ast_SEL_Stmt->ast_SEL_StmtList[ label=parent, style=solid ];
	ast_SEL_EdgeRH->ast_SEL_EdgeRHS[ label=parent, style=solid ];
	ast_SEL_EdgeOp->ast_SEL_EdgeRH[ label=field, style=dashed ];
	ast_SEL_Location->ast_SEL_EdgeRH[ label=field, style=dashed ];
	ast_SEL_GraphType->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_StmtList->ast_SEL_GraphTYPE[ label=field, style=dashed ];
	ast_SEL_Id->ast_SEL_SubGraphTYPE[ label=field, style=dashed ];
	ast_SEL_StmtList->ast_SEL_SubGraphTYPE[ label=field, style=dashed ];
	ast_SEL_AList->ast_SEL_AttrList[ label=parent, style=solid ];
	ast_SEL_Id->ast_SEL_NodeId[ label=field, style=dashed ];
	ast_SEL_Port->ast_SEL_NodeId[ label=field, style=dashed ];
	ast_SEL_Location->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_EdgeRHS->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_EdgeStmt[ label=field, style=dashed ];
	ast_SEL_AttrList->ast_SEL_NodeAttrs[ label=parent, style=solid ];
	GraphTYPE->Interface[ label=implements, style=bold ];
	writer->Interface[ label=implements, style=bold ];
	Escape->Interface[ label=implements, style=bold ];
	NodeInterface->GraphableNode[ label=inherited, style=solid ];
	EdgesInterface->GraphableNode[ label=inherited, style=solid ];
	scanner_SEL_Scanner->parser_SEL_Scanner[ label=implements, style=bold ];
	parser_SEL_Reduce->parser_SEL_Action[ label=implements, style=bold ];
	parser_SEL_Accept->parser_SEL_Action[ label=implements, style=bold ];
	parser_SEL_Shift->parser_SEL_Action[ label=implements, style=bold ];
	parser_SEL_stack->parser_SEL_Attrib[ label=implements, style=bold ];
	parser_SEL_Reduce->parser_SEL_Attrib[ label=implements, style=bold ];
	parser_SEL_Accept->parser_SEL_Attrib[ label=implements, style=bold ];
	parser_SEL_Shift->parser_SEL_Attrib[ label=implements, style=bold ];
	parser_SEL_ActionRow->parser_SEL_Attrib[ label=implements, style=bold ];
	nilVisitor->ast_SEL_Visitor[ label=implements, style=bold ];
	graphVisitor->ast_SEL_Visitor[ label=implements, style=bold ];
	stmtVisitor->ast_SEL_Visitor[ label=implements, style=bold ];
	ast_SEL_Elem->ast_SEL_Location[ label=inherited, style=solid ];
	ast_SEL_Walkable->ast_SEL_Location[ label=inherited, style=solid ];
	ast_SEL_SubGraphTYPE->ast_SEL_Location[ label=implements, style=bold ];
	ast_SEL_NodeId->ast_SEL_Location[ label=implements, style=bold ];
	ast_SEL_Elem->ast_SEL_Stmt[ label=inherited, style=solid ];
	ast_SEL_Walkable->ast_SEL_Stmt[ label=inherited, style=solid ];
	ast_SEL_EdgeAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_GraphAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_Attr->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_NodeStmt->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_SubGraphTYPE->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_EdgeStmt->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_NodeAttrs->ast_SEL_Stmt[ label=implements, style=bold ];
	ast_SEL_EdgeAttrs->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_AList->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_GraphAttrs->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_Port->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_Attr->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_NodeStmt->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_StmtList->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeRHS->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeOp->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_Id->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeRH->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_GraphType->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_GraphTYPE->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_SubGraphTYPE->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_AttrList->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_NodeId->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeStmt->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_Bool->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_NodeAttrs->ast_SEL_Walkable[ label=implements, style=invis ];
	ast_SEL_EdgeAttrs->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_AList->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_GraphAttrs->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Port->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Attr->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_NodeStmt->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_StmtList->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeRHS->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeOp->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Id->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeRH->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_GraphType->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_GraphTYPE->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_SubGraphTYPE->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_AttrList->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_NodeId->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_EdgeStmt->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_Bool->ast_SEL_Elem[ label=implements, style=invis ];
	ast_SEL_NodeAttrs->ast_SEL_Elem[ label=implements, style=invis ];
	Attrs [ label="{Attrs|map[string]string|Add(field string, value string) \lExtend(more Attrs) \lAmmend(more Attrs) \lSortedNames() []string\lCopy() Attrs\l}", shape=record ];
	EdgeTYPE [ label="{Edge|Src string\lSrcPort string\lDst string\lDstPort string\lDir bool\lAttrs Attrs\l|}", shape=record ];
	Edges [ label="{Edges|SrcToDsts map[string]map[string]*Edge\lDstToSrcs map[string]map[string]*Edge\lEdges []*Edge\l|Add(edge *Edge) \lSorted() []*Edge\l}", shape=record ];
	EdgesInterface [ label="{EdgesInterface||Edges() []*Edge\l}", shape=Mrecord ];
	Escape [ label="{Escape|Graph\l|SetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lIsNode(name string) bool\lIsSubGraph(name string) bool\l}", shape=record ];
	GraphTYPE [ label="{Graph|Attrs Attrs\lName string\lDirected bool\lStrict bool\lNodes *Nodes\lEdges *Edges\lSubGraphs *SubGraphs\lRelations *Relations\l|SetStrict(strict bool) \lSetDir(directed bool) \lSetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddEdgesInterface(edges EdgesInterface) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddNodeInterface(parentGraph string, node NodeInterface) \lAddGraphableNode(parentGraph string, node GraphableNode) \lAddGraphableNodes(parentGraph string, nodes []GraphableNode) \lgetAttrs(graphName string) Attrs\lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lIsNode(name string) bool\lIsSubGraph(name string) bool\lWriteAst() *ast.Graph\lString() string\l}", shape=record ];
	GraphableNode [ label="{GraphableNode|NodeInterface\nEdgesInterface\n|}", shape=Mrecord ];
	Interface [ label="{Interface||SetStrict(strict bool) \lSetDir(directed bool) \lSetName(name string) \lAddPortEdge(src, srcPort, dst, dstPort string, directed bool, attrs map[string]string) \lAddEdge(src, dst string, directed bool, attrs map[string]string) \lAddNode(parentGraph string, name string, attrs map[string]string) \lAddAttr(parentGraph string, field, value string) \lAddSubGraph(parentGraph string, name string, attrs map[string]string) \lString() string\l}", shape=Mrecord ];
	NodeInterface [ label="{NodeInterface||Name() string\lAttrs() Attrs\l}", shape=Mrecord ];
	NodeTYPE [ label="{Node|Name string\lAttrs Attrs\l|}", shape=record ];
	Nodes [ label="{Nodes|Lookup map[string]*Node\lNodes []*Node\l|Add(node *Node) \lSorted() []*Node\l}", shape=record ];
	Relations [ label="{Relations|ParentToChildren map[string]map[string]bool\lChildToParents map[string]map[string]bool\l|Add(field string, value string) \lSortedChildren(parent string) []string\l}", shape=record ];
	SubGraphTYPE [ label="{SubGraph|Attrs Attrs\lName string\l|}", shape=record ];
	SubGraphs [ label="{SubGraphs|SubGraphs map[string]*SubGraph\l|Add(name string) \lSorted() []*SubGraph\l}", shape=record ];
	ast_SEL_AList [ label="{ast.AList|[]*Attr|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Attr [ label="{ast.Attr|Field Id\lValue Id\l|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_AttrList [ label="{ast.AttrList|[]AList|String() string\lWalk(v Visitor) \lGetMap() map[string]string\l}", shape=record ];
	ast_SEL_Bool [ label="{ast.Bool|bool|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeAttrs [ label="{ast.EdgeAttrs|AttrList|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeOp [ label="{ast.EdgeOp|bool|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeRH [ label="{ast.EdgeRH|Op EdgeOp\lDestination Location\l|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeRHS [ label="{ast.EdgeRHS|[]*EdgeRH|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_EdgeStmt [ label="{ast.EdgeStmt|Source Location\lEdgeRHS EdgeRHS\lAttrs AttrList\l|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Elem [ label="{ast.Elem|*HIGHLY IMPLMENTED*\n|String() string\l}", shape=Mrecord ];
	ast_SEL_GraphAttrs [ label="{ast.GraphAttrs|AttrList|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_GraphTYPE [ label="{ast.Graph|Type GraphType\lStrict bool\lId Id\lStmtList StmtList\l|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_GraphType [ label="{ast.GraphType|bool|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Id [ label="{ast.Id|string|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Location [ label="{ast.Location|Elem\nWalkable\n|isLocation() \lGetId() Id\lGetPort() Port\lIsNode() bool\l}", shape=Mrecord ];
	ast_SEL_NodeAttrs [ label="{ast.NodeAttrs|AttrList|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_NodeId [ label="{ast.NodeId|Id Id\lPort Port\l|isLocation() \lIsNode() bool\lString() string\lGetId() Id\lGetPort() Port\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_NodeStmt [ label="{ast.NodeStmt|NodeId *NodeId\lAttrs AttrList\l|isStmt() \lString() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Port [ label="{ast.Port|Id1 Id\lId2 Id\l|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_Stmt [ label="{ast.Stmt|Elem\nWalkable\n|isStmt() \l}", shape=Mrecord ];
	ast_SEL_StmtList [ label="{ast.StmtList|[]Stmt|String() string\lWalk(v Visitor) \l}", shape=record ];
	ast_SEL_SubGraphTYPE [ label="{ast.SubGraph|Id Id\lStmtList StmtList\l|isStmt() \lGetId() Id\lGetPort() Port\lString() string\lWalk(v Visitor) \lisLocation() \lIsNode() bool\l}", shape=record ];
	ast_SEL_Visitor [ label="{ast.Visitor||Visit(v ast.Elem) ast.Visitor\l}", shape=Mrecord ];
	ast_SEL_Walkable [ label="{ast.Walkable|*HIGHLY IMPLMENTED*\n|Walk(v Visitor) \l}", shape=Mrecord ];
	graphVisitor [ label="{graphVisitor|g Interface\l|Visit(v ast.Elem) ast.Visitor\l}", shape=record ];
	nilVisitor [ label="{nilVisitor||Visit(v ast.Elem) ast.Visitor\l}", shape=record ];
	parser_SEL_Accept [ label="{parser.Accept|int|Act() \lString() string\l}", shape=record ];
	parser_SEL_Action [ label="{parser.Action||Act() \lString() string\l}", shape=Mrecord ];
	parser_SEL_ActionRow [ label="{parser.ActionRow|map[token.Type]Action|String() string\l}", shape=record ];
	parser_SEL_ActionTab [ label="{parser.ActionTab|[]ActionRow|}", shape=record ];
	parser_SEL_Attrib [ label="{parser.Attrib||String() string\l}", shape=Mrecord ];
	parser_SEL_GotoRow [ label="{parser.GotoRow|map[NT]State|}", shape=record ];
	parser_SEL_GotoTab [ label="{parser.GotoTab|[]GotoRow|}", shape=record ];
	parser_SEL_NT [ label="{parser.NT|string|}", shape=record ];
	parser_SEL_Parser [ label="{parser.Parser|actTab ActionTab\lgotoTab GotoTab\lprodTab ProdTab\lstack *stack\lnextToken *token.Token\lpos token.Position\ltokenMap *token.TokenMap\l|Error(err error) error\lTokString(tok *token.Token) string\lParse(scanner Scanner) (res interface\{\}, err error)\l}", shape=record ];
	parser_SEL_ProdTab [ label="{parser.ProdTab|[]ProdTabEntry|}", shape=record ];
	parser_SEL_ProdTabEntry [ label="{parser.ProdTabEntry|String string\lHead NT\lNumSymbols int\lReduceFunc func([]Attrib) (Attrib, error)\l|}", shape=record ];
	parser_SEL_Reduce [ label="{parser.Reduce|int|Act() \lString() string\l}", shape=record ];
	parser_SEL_Scanner [ label="{parser.Scanner||Scan() (*token.Token, token.Position)\l}", shape=Mrecord ];
	parser_SEL_Shift [ label="{parser.Shift|State|Act() \lString() string\l}", shape=record ];
	parser_SEL_State [ label="{parser.State|int|}", shape=record ];
	parser_SEL_stack [ label="{parser.stack|state []State\lattrib []Attrib\l|Push(s State, a Attrib) \lTop() State\lPopN(items int) []Attrib\lString() string\l}", shape=record ];
	scanner_SEL_Error [ label="{scanner.Error|Pos token.Position\lMsg string\l|String() string\l}", shape=record ];
	scanner_SEL_ErrorHandler [ label="{scanner.ErrorHandler||Error(pos token.Position, msg string) \l}", shape=Mrecord ];
	scanner_SEL_Scanner [ label="{scanner.Scanner|src []byte\ltokenMap *token.TokenMap\lpos token.Position\loffset int\lch rune\lErrorCount int\l|next() \lInit(src []byte, tokenMap *token.TokenMap) \lerror(pos token.Position, msg string) \lexpect(ch rune) \lscanComment(pos token.Position) \lfindNewline(pos token.Position) bool\lscanEscape(quote rune) \lscanChar(pos token.Position) \lisToken(str string) bool\lscanIdentifier() token.Type\lscanNumber() token.Type\lscanHTML() token.Type\lscanSDTLit(pos token.Position) \lscanString(pos token.Position) \lscanRawString(pos token.Position) \lskipWhitespace() \lswitch2(tok0, tok1 token.Type) token.Type\lswitch3(tok0, tok1 token.Type, ch2 rune, tok2 token.Type) token.Type\lswitch4(tok0, tok1 token.Type, ch2 rune, tok2, tok3 token.Type) token.Type\lScan() (*token.Token, token.Position)\l}", shape=record ];
	stmtVisitor [ label="{stmtVisitor|g Interface\lgraphName string\lcurrentNodeAttrs Attrs\lcurrentEdgeAttrs Attrs\lcurrentGraphAttrs Attrs\l|Visit(v ast.Elem) ast.Visitor\lnodeStmt(stmt ast.NodeStmt) ast.Visitor\ledgeStmt(stmt ast.EdgeStmt) ast.Visitor\lnodeAttrs(stmt ast.NodeAttrs) ast.Visitor\ledgeAttrs(stmt ast.EdgeAttrs) ast.Visitor\lgraphAttrs(stmt ast.GraphAttrs) ast.Visitor\lsubGraph(stmt *ast.SubGraph) ast.Visitor\lattr(stmt *ast.Attr) ast.Visitor\l}", shape=record ];
	token_SEL_Position [ label="{token.Position|Offset int\lLine int\lColumn int\l|IsValid() bool\lString() string\l}", shape=record ];
	token_SEL_Token [ label="{token.Token|Type Type\lLit []byte\l|Equals(that *Token) bool\lString() string\lIntValue() (int64, error)\lUintValue() (uint64, error)\lSDTVal() string\l}", shape=record ];
	token_SEL_TokenMap [ label="{token.TokenMap|tokenMap []string\lstringMap map[string]Type\l|AddToken(str string) \lType(key string) Type\lTokenString(typ Type) string\lString() string\lStrings() []string\lEquals(that *TokenMap) bool\lTokens() []*Token\lWriteFile(file string) error\l}", shape=record ];
	token_SEL_Type [ label="{token.Type|int|String() string\l}", shape=record ];
	writer [ label="{writer|Graph\lwrittenLocations map[string]bool\l|newSubGraph(name string) *ast.SubGraph\lnewNodeId(name string, port string) *ast.NodeId\lnewNodeStmt(name string) *ast.NodeStmt\lnewLocation(name string, port string) ast.Location\lnewEdgeStmt(edge *Edge) *ast.EdgeStmt\lWrite() *ast.Graph\l}", shape=record ];

}

